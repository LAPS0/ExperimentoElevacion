library(jtools)
library(gdtools)
library(broom)
library(ggstatsplot)
library(modelsummary)
# library(gmodels)
library(ggpubr)
# install.packages("stargazer")
# library(stargazer)
library(nlme)
# install.packages("sjPlot")
library(flextable)
library(sjPlot)
# install.packages("webshot")
library(webshot)
library(officer)
rm(list=ls())
figures_folder = "figuras"
results_tbl <- read.csv("./DatosUnificados/Dresults_without_outliers_slope_and_intercepto_lin_log.csv", header = TRUE, sep = ',', stringsAsFactors = TRUE)
cbPalette <- c("#000000","#E69F00","#009E73", "#999999", "#D55E00", "#0072B2", "#CC79A7", "#F0E442")
m.Dist1 <-  lmer(perc_dist ~ target_distance*condition+(target_distance|subject),
data = filter(results_tbl,type == "NORMAL"))
extract_stats(ggcoefstats(m.Dist1))
anova(m.Dist1)
anov = anova(m.Dist1)
p_val_format <- function(x){
z <- scales::pvalue_format()(x)
z[!is.finite(x)] <- ""
z
}
anov$Predictors = c("Target distance","Condition","Target distance:Condition")
anov = data.frame(anov)
anov <- flextable(anov,col_keys = c("Predictors","numDF", "denDF", "F.value","p.value")) %>%
hline_top(border = fp_border(color="black", width = .5), part = "all")%>%
hline_bottom(border = fp_border(color="black", width = .5))%>%
width(j = 1, width = 5, unit = "cm")%>%
align(align = "center", part = "all")%>%
align(j = 1, align = "left", part = "all")%>%
colformat_double(digits = 1, na_str = "N/A")%>%
set_formatter(values = list("p.value" = p_val_format) )%>%
font(fontname = "+font-family: Arial;")%>%
font(fontname = "+font-family: Arial;", part = "header")%>%
fontsize(size = 10.5, part = "header")%>%
fontsize(size = 10.5)%>%
bold(j = "p.value", bold = TRUE)%>%
italic(italic = TRUE, part = "header")%>%
line_spacing(space = 1, part = "body")%>%
line_spacing(space = .5, part = "header")
m.Dist1 <-  lmer(perc_dist ~ target_distance*condition+(target_distance|subject),
data = filter(results_tbl,type == "NORMAL"))
extract_stats(ggcoefstats(m.Dist1))
anova(m.Dist1)
anov = anova(m.Dist1)
p_val_format <- function(x){
z <- scales::pvalue_format()(x)
z[!is.finite(x)] <- ""
z
}
m.Dist1 <-  lmer(perc_dist ~ target_distance*condition+(target_distance|subject),
data = filter(results_tbl,type == "NORMAL"))
extract_stats(ggcoefstats(m.Dist1))
anova(m.Dist1)
anov = anova(m.Dist1)
p_val_format <- function(x){
z <- scales::pvalue_format()(x)
z[!is.finite(x)] <- ""
z
}
m.Dist1 <-  lmer(perc_dist ~ target_distance*condition+(target_distance|subject),
data = filter(results_tbl,type == "NORMAL"))
extract_stats(ggcoefstats(m.Dist1))
anova(m.Dist1)
anov = anova(m.Dist1)
anova(m.Dist1)
anov1 = anova(m.Dist1)
p_val_format <- function(x){
z <- scales::pvalue_format()(x)
z[!is.finite(x)] <- ""
z
}
anov1$Predictors = c("Target distance","Condition","Target distance:Condition")
anov1 = data.frame(anov1)
anov1 <- flextable(anov1) %>%
hline_top(border = fp_border(color="black", width = .5), part = "all")%>%
hline_bottom(border = fp_border(color="black", width = .5))%>%
width(j = 1, width = 5, unit = "cm")%>%
align(align = "center", part = "all")%>%
align(j = 1, align = "left", part = "all")%>%
colformat_double(digits = 1, na_str = "N/A")%>%
# set_formatter(values = list("p.value" = p_val_format) )%>%
font(fontname = "+font-family: Arial;")%>%
font(fontname = "+font-family: Arial;", part = "header")%>%
fontsize(size = 10.5, part = "header")%>%
fontsize(size = 10.5)%>%
# bold(j = "p.value", bold = TRUE)%>%
italic(italic = TRUE, part = "header")%>%
line_spacing(space = 1, part = "body")%>%
line_spacing(space = .5, part = "header")
anov
anov1
m.Dist1 <-  lmer(perc_dist ~ target_distance*condition+(target_distance|subject),
data = filter(results_tbl,type == "NORMAL"))
extract_stats(ggcoefstats(m.Dist1))
anova(m.Dist1)
anov1 = anova(m.Dist1)
p_val_format <- function(x){
z <- scales::pvalue_format()(x)
z[!is.finite(x)] <- ""
z
}
anov1$Predictors = c("Target distance","Condition","Target distance:Condition")
anov1 = data.frame(anov1)
anov1 <- flextable(anov1,col_keys = c("Predictors","SumSq", "MeanSq", "NumDF", "F.value","Pr..F.")) %>%
hline_top(border = fp_border(color="black", width = .5), part = "all")%>%
hline_bottom(border = fp_border(color="black", width = .5))%>%
width(j = 1, width = 5, unit = "cm")%>%
align(align = "center", part = "all")%>%
align(j = 1, align = "left", part = "all")%>%
colformat_double(digits = 1, na_str = "N/A")%>%
set_formatter(values = list("p.value" = p_val_format) )%>%
font(fontname = "+font-family: Arial;")%>%
font(fontname = "+font-family: Arial;", part = "header")%>%
fontsize(size = 10.5, part = "header")%>%
fontsize(size = 10.5)%>%
bold(j = "p.value", bold = TRUE)%>%
italic(italic = TRUE, part = "header")%>%
line_spacing(space = 1, part = "body")%>%
line_spacing(space = .5, part = "header")
anov1 <- flextable(anov1,col_keys = c("Predictors","SumSq", "MeanSq", "NumDF", "F.value","Pr..F.")) %>%
hline_top(border = fp_border(color="black", width = .5), part = "all")%>%
hline_bottom(border = fp_border(color="black", width = .5))%>%
width(j = 1, width = 5, unit = "cm")%>%
align(align = "center", part = "all")%>%
align(j = 1, align = "left", part = "all")%>%
colformat_double(digits = 1, na_str = "N/A")%>%
set_formatter(values = list("Pr..F." = p_val_format) )%>%
font(fontname = "+font-family: Arial;")%>%
font(fontname = "+font-family: Arial;", part = "header")%>%
fontsize(size = 10.5, part = "header")%>%
fontsize(size = 10.5)%>%
bold(j = "Pr..F.", bold = TRUE)%>%
italic(italic = TRUE, part = "header")%>%
line_spacing(space = 1, part = "body")%>%
line_spacing(space = .5, part = "header")
anov1
m.Dist1 <-  lmer(perc_dist ~ target_distance*condition+(target_distance|subject),
data = filter(results_tbl,type == "NORMAL"))
extract_stats(ggcoefstats(m.Dist1))
anova(m.Dist1)
anov1 = anova(m.Dist1)
p_val_format <- function(x){
z <- scales::pvalue_format()(x)
z[!is.finite(x)] <- ""
z
}
anov1$Predictors = c("Target distance","Condition","Target distance:Condition")
anov1 = data.frame(anov1)
anov1 <- flextable(anov1) %>%
hline_top(border = fp_border(color="black", width = .5), part = "all")%>%
hline_bottom(border = fp_border(color="black", width = .5))%>%
width(j = 1, width = 5, unit = "cm")%>%
align(align = "center", part = "all")%>%
align(j = 1, align = "left", part = "all")%>%
colformat_double(digits = 1, na_str = "N/A")%>%
set_formatter(values = list("Pr..F." = p_val_format) )%>%
font(fontname = "+font-family: Arial;")%>%
font(fontname = "+font-family: Arial;", part = "header")%>%
fontsize(size = 10.5, part = "header")%>%
fontsize(size = 10.5)%>%
bold(j = "Pr..F.", bold = TRUE)%>%
italic(italic = TRUE, part = "header")%>%
line_spacing(space = 1, part = "body")%>%
line_spacing(space = .5, part = "header")
anov1
anov1 = data.frame(anov1)
anov1 <- flextable(anov1,col_keys = c("Predictors","Sum.Sq", "Mean.Sq", "NumDF","Den.DF", "F.value","Pr..F.")) %>%
hline_top(border = fp_border(color="black", width = .5), part = "all")%>%
hline_bottom(border = fp_border(color="black", width = .5))%>%
width(j = 1, width = 5, unit = "cm")%>%
align(align = "center", part = "all")%>%
align(j = 1, align = "left", part = "all")%>%
colformat_double(digits = 1, na_str = "N/A")%>%
set_formatter(values = list("Pr..F." = p_val_format) )%>%
font(fontname = "+font-family: Arial;")%>%
font(fontname = "+font-family: Arial;", part = "header")%>%
fontsize(size = 10.5, part = "header")%>%
fontsize(size = 10.5)%>%
bold(j = "Pr..F.", bold = TRUE)%>%
italic(italic = TRUE, part = "header")%>%
line_spacing(space = 1, part = "body")%>%
line_spacing(space = .5, part = "header")
anov1
m.Dist1 <-  lmer(perc_dist ~ target_distance*condition+(target_distance|subject),
data = filter(results_tbl,type == "NORMAL"))
extract_stats(ggcoefstats(m.Dist1))
anova(m.Dist1)
anov1 = anova(m.Dist1)
p_val_format <- function(x){
z <- scales::pvalue_format()(x)
z[!is.finite(x)] <- ""
z
}
anov1$Predictors = c("Target distance","Condition","Target distance:Condition")
anov1 = data.frame(anov1)
anov1 <- flextable(anov1,col_keys = c("Predictors","Sum.Sq", "Mean.Sq", "NumDF","Den.DF", "F.value","Pr..F.")) %>%
hline_top(border = fp_border(color="black", width = .5), part = "all")%>%
hline_bottom(border = fp_border(color="black", width = .5))%>%
width(j = 1, width = 5, unit = "cm")%>%
align(align = "center", part = "all")%>%
align(j = 1, align = "left", part = "all")%>%
colformat_double(digits = 1, na_str = "N/A")%>%
set_formatter(values = list("Pr..F." = p_val_format) )%>%
font(fontname = "+font-family: Arial;")%>%
font(fontname = "+font-family: Arial;", part = "header")%>%
fontsize(size = 10.5, part = "header")%>%
fontsize(size = 10.5)%>%
bold(j = "Pr..F.", bold = TRUE)%>%
italic(italic = TRUE, part = "header")%>%
line_spacing(space = 1, part = "body")%>%
line_spacing(space = .5, part = "header")
anov1
save_as_image(anov1,"anov_PAD_POB.png")
m.Dist1 <-  lmer(perc_dist ~ target_distance*condition+(target_distance|subject),
data = filter(results_tbl,type == "NORMAL"))
extract_stats(ggcoefstats(m.Dist1))
anova(m.Dist1)
anov1 = anova(m.Dist1)
p_val_format <- function(x){
z <- scales::pvalue_format()(x)
z[!is.finite(x)] <- ""
z
}
anov1$Predictors = c("Target distance","Condition","Target distance:Condition")
anov1 = data.frame(anov1)
anov1 <- flextable(anov1,col_keys = c("Predictors","NumDF","Den.DF", "F.value","Pr..F.")) %>%
hline_top(border = fp_border(color="black", width = .5), part = "all")%>%
hline_bottom(border = fp_border(color="black", width = .5))%>%
width(j = 1, width = 5, unit = "cm")%>%
align(align = "center", part = "all")%>%
align(j = 1, align = "left", part = "all")%>%
colformat_double(digits = 1, na_str = "N/A")%>%
set_formatter(values = list("Pr..F." = p_val_format) )%>%
font(fontname = "+font-family: Arial;")%>%
font(fontname = "+font-family: Arial;", part = "header")%>%
fontsize(size = 10.5, part = "header")%>%
fontsize(size = 10.5)%>%
bold(j = "Pr..F.", bold = TRUE)%>%
italic(italic = TRUE, part = "header")%>%
line_spacing(space = 1, part = "body")%>%
line_spacing(space = .5, part = "header")
anov1
m.Dist1 <-  lmer(perc_dist ~ target_distance*condition+(target_distance|subject),
data = filter(results_tbl,type == "NORMAL"))
extract_stats(ggcoefstats(m.Dist1))
anova(m.Dist1)
anov1 = anova(m.Dist1)
p_val_format <- function(x){
z <- scales::pvalue_format()(x)
z[!is.finite(x)] <- ""
z
}
anov1$Predictors = c("Target distance","Condition","Target distance:Condition")
anov1 = data.frame(anov1)
anov1 <- flextable(anov1) %>%
hline_top(border = fp_border(color="black", width = .5), part = "all")%>%
hline_bottom(border = fp_border(color="black", width = .5))%>%
width(j = 1, width = 5, unit = "cm")%>%
align(align = "center", part = "all")%>%
align(j = 1, align = "left", part = "all")%>%
colformat_double(digits = 1, na_str = "N/A")%>%
set_formatter(values = list("Pr..F." = p_val_format) )%>%
font(fontname = "+font-family: Arial;")%>%
font(fontname = "+font-family: Arial;", part = "header")%>%
fontsize(size = 10.5, part = "header")%>%
fontsize(size = 10.5)%>%
bold(j = "Pr..F.", bold = TRUE)%>%
italic(italic = TRUE, part = "header")%>%
line_spacing(space = 1, part = "body")%>%
line_spacing(space = .5, part = "header")
anov1
m.Dist1 <-  lmer(perc_dist ~ target_distance*condition+(target_distance|subject),
data = filter(results_tbl,type == "NORMAL"))
extract_stats(ggcoefstats(m.Dist1))
anova(m.Dist1)
anov1 = anova(m.Dist1)
p_val_format <- function(x){
z <- scales::pvalue_format()(x)
z[!is.finite(x)] <- ""
z
}
anov1$Predictors = c("Target distance","Condition","Target distance:Condition")
anov1 = data.frame(anov1)
anov1 <- flextable(anov1,col_keys = c("Predictors","NumDF","DenDF", "F.value","Pr..F.")) %>%
hline_top(border = fp_border(color="black", width = .5), part = "all")%>%
hline_bottom(border = fp_border(color="black", width = .5))%>%
width(j = 1, width = 5, unit = "cm")%>%
align(align = "center", part = "all")%>%
align(j = 1, align = "left", part = "all")%>%
colformat_double(digits = 1, na_str = "N/A")%>%
set_formatter(values = list("Pr..F." = p_val_format) )%>%
font(fontname = "+font-family: Arial;")%>%
font(fontname = "+font-family: Arial;", part = "header")%>%
fontsize(size = 10.5, part = "header")%>%
fontsize(size = 10.5)%>%
bold(j = "Pr..F.", bold = TRUE)%>%
italic(italic = TRUE, part = "header")%>%
line_spacing(space = 1, part = "body")%>%
line_spacing(space = .5, part = "header")
anov1
save_as_image(anov1,"anov_PAD_POB.png")
anov1$Pr(>"F") = 2
m.Dist1 <-  lmer(perc_dist ~ target_distance*condition+(target_distance|subject),
data = filter(results_tbl,type == "NORMAL"))
extract_stats(ggcoefstats(m.Dist1))
anova(m.Dist1)
anov1 = anova(m.Dist1)
p_val_format <- function(x){
z <- scales::pvalue_format()(x)
z[!is.finite(x)] <- ""
z
}
anov1$Predictors = c("Target distance","Condition","Target distance:Condition")
anov1 = data.frame(anov1)
anov1 <- flextable(anov1,col_keys = c("Predictors","NumDF","DenDF", "F.value","Pr..F.")) %>%
hline_top(border = fp_border(color="black", width = .5), part = "all")%>%
hline_bottom(border = fp_border(color="black", width = .5))%>%
width(j = 1, width = 5, unit = "cm")%>%
align(align = "center", part = "all")%>%
align(j = 1, align = "left", part = "all")%>%
colformat_double(digits = 1, na_str = "N/A")%>%
set_formatter(values = list("Pr..F." = p_val_format) )%>%
font(fontname = "+font-family: Arial;")%>%
font(fontname = "+font-family: Arial;", part = "header")%>%
fontsize(size = 10.5, part = "header")%>%
fontsize(size = 10.5)%>%
bold(j = "Pr..F.", bold = TRUE)%>%
italic(italic = TRUE, part = "header")%>%
line_spacing(space = 1, part = "body")%>%
line_spacing(space = .5, part = "header")
anov1
save_as_image(anov1,"Anov_PAD_POB_NORMAL_LIN.png")
tab_model(m.Dist1,file="plot.html")
tab_model(m.Dist1, wrap.labels = 80,
auto.label = FALSE, show.stat = TRUE, string.p = "p.value", string.ci = "CI 95%", dv.labels = "Perceived distance",
show.intercept = TRUE, show.aic = FALSE, show.zeroinf = TRUE, show.re.var = FALSE, show.reflvl = TRUE,
CSS = list(css.table = '+font-family: Arial;'),
pred.labels = c("Intercept","Target distance", "Condition (Floor level)","Target distance * Condition (Floor level)"),
file = "plot.html")
webshot("plot.html","Summary_PAD_POB_NORMAL_LIN.png", vwidth = 600, vheight = 100)
webshot("plot.html","Summary_PAD_POB_NORMAL_LIN.png", vwidth = 600, vheight = 100)
eq1 <- substitute("Ear level:"~~~italic(y) == a %.% italic(X)+italic((b)),
list(a = round(m.Dist1$coefficients$fixed[[2]],digits = 2),
b = round(m.Dist1$coefficients$fixed[[1]], digits = 2)))
eq2 <- substitute("Floor level:"~~~italic(y) == a %.% italic(X)+italic((b)),
list(a = round(m.Dist1$coefficients$fixed[[2]]+m.Dist1$coefficients$fixed[[4]], digits = 2),
b = round(m.Dist1$coefficients$fixed[[1]]+m.Dist1$coefficients$fixed[[3]], digits = 2)))
eq3 <- substitute("r.squared:"~~~italic(R)^italic(2) == italic(b),
list(b = round(r.squaredGLMM(m.Dist1)[2], digits = 2)))
tabla.pob = filter(results_tbl,type == "NORMAL") %>% group_by(target_distance,condition) %>%
summarise(Mperc_dist  = mean(perc_dist),
SDperc_dist = sd(perc_dist)/sqrt(n()))  %>%
ungroup()
f1 <- ggplot(tabla.pob, aes(x=target_distance, y =Mperc_dist, group = condition, color  = condition)) +
geom_pointrange(aes(x = target_distance, y = Mperc_dist, ymin = Mperc_dist-SDperc_dist, ymax = Mperc_dist+SDperc_dist),alpha = 1,
position = position_jitterdodge(jitter.width = .1,
jitter.height = 0,
dodge.width = .1 ))+
geom_abline(intercept = 0, slope = 1, linetype=2) +
scale_colour_manual(values = cbPalette) +
scale_fill_manual(values = cbPalette) +
geom_abline(slope =m.Dist1$coefficients$fixed[[2]],
intercept =m.Dist1$coefficients$fixed[[1]],
alpha = 0.5,
color = "#000000") +
geom_abline(slope =m.Dist1$coefficients$fixed[[2]]+m.Dist1$coefficients$fixed[[4]],
intercept =m.Dist1$coefficients$fixed[[1]]+m.Dist1$coefficients$fixed[[3]],
alpha = 0.5,
color = "#E69F00") +
geom_text(x = 0.2, y = 7.1, label = as.character(as.expression(eq1)), hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#000000")+
geom_text(x = 0.2, y = 6.7, label = as.character(as.expression(eq2)), hjust = 0, nudge_x =  0,parse = TRUE, size = 4, color = "#E69F00")+
geom_text(x = 0.2, y = 6.3, label = as.character(as.expression(eq3)), hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#009E73")+
scale_x_continuous(name="Distance source (m)", limits = c(0,8)) +
scale_y_continuous(name="Perceived distance (m)",   limits = c(0,8)) +
theme_pubr(base_size = 12, margin = TRUE)+
theme(legend.position = "top",
legend.title = element_blank())
f1
m.Dist1 <-  lme(perc_dist ~ target_distance*condition, random = ~target_distance|subject,
method = "ML", control =list(msMaxIter = 1000, msMaxEval = 1000),
data = filter(results_tbl,type == "NORMAL"))
eq1 <- substitute("Ear level:"~~~italic(y) == a %.% italic(X)+italic((b)),
list(a = round(m.Dist1$coefficients$fixed[[2]],digits = 2),
b = round(m.Dist1$coefficients$fixed[[1]], digits = 2)))
eq2 <- substitute("Floor level:"~~~italic(y) == a %.% italic(X)+italic((b)),
list(a = round(m.Dist1$coefficients$fixed[[2]]+m.Dist1$coefficients$fixed[[4]], digits = 2),
b = round(m.Dist1$coefficients$fixed[[1]]+m.Dist1$coefficients$fixed[[3]], digits = 2)))
eq3 <- substitute("r.squared:"~~~italic(R)^italic(2) == italic(b),
list(b = round(r.squaredGLMM(m.Dist1)[2], digits = 2)))
tabla.pob = filter(results_tbl,type == "NORMAL") %>% group_by(target_distance,condition) %>%
summarise(Mperc_dist  = mean(perc_dist),
SDperc_dist = sd(perc_dist)/sqrt(n()))  %>%
ungroup()
f1 <- ggplot(tabla.pob, aes(x=target_distance, y =Mperc_dist, group = condition, color  = condition)) +
geom_pointrange(aes(x = target_distance, y = Mperc_dist, ymin = Mperc_dist-SDperc_dist, ymax = Mperc_dist+SDperc_dist),alpha = 1,
position = position_jitterdodge(jitter.width = .1,
jitter.height = 0,
dodge.width = .1 ))+
geom_abline(intercept = 0, slope = 1, linetype=2) +
scale_colour_manual(values = cbPalette) +
scale_fill_manual(values = cbPalette) +
geom_abline(slope =m.Dist1$coefficients$fixed[[2]],
intercept =m.Dist1$coefficients$fixed[[1]],
alpha = 0.5,
color = "#000000") +
geom_abline(slope =m.Dist1$coefficients$fixed[[2]]+m.Dist1$coefficients$fixed[[4]],
intercept =m.Dist1$coefficients$fixed[[1]]+m.Dist1$coefficients$fixed[[3]],
alpha = 0.5,
color = "#E69F00") +
geom_text(x = 0.2, y = 7.1, label = as.character(as.expression(eq1)), hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#000000")+
geom_text(x = 0.2, y = 6.7, label = as.character(as.expression(eq2)), hjust = 0, nudge_x =  0,parse = TRUE, size = 4, color = "#E69F00")+
geom_text(x = 0.2, y = 6.3, label = as.character(as.expression(eq3)), hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#009E73")+
scale_x_continuous(name="Distance source (m)", limits = c(0,8)) +
scale_y_continuous(name="Perceived distance (m)",   limits = c(0,8)) +
theme_pubr(base_size = 12, margin = TRUE)+
theme(legend.position = "top",
legend.title = element_blank())
f1
# ROVED
m.Dist1 <-  lmer(perc_dist ~ target_distance*condition+(target_distance|subject),
data = filter(results_tbl,type == "ROVED"))
extract_stats(ggcoefstats(m.Dist1))
anova(m.Dist1)
anov1 = anova(m.Dist1)
p_val_format <- function(x){
z <- scales::pvalue_format()(x)
z[!is.finite(x)] <- ""
z
}
anov1$Predictors = c("Target distance","Condition","Target distance:Condition")
anov1 = data.frame(anov1)
anov1 <- flextable(anov1,col_keys = c("Predictors","NumDF","DenDF", "F.value","Pr..F.")) %>%
hline_top(border = fp_border(color="black", width = .5), part = "all")%>%
hline_bottom(border = fp_border(color="black", width = .5))%>%
width(j = 1, width = 5, unit = "cm")%>%
align(align = "center", part = "all")%>%
align(j = 1, align = "left", part = "all")%>%
colformat_double(digits = 1, na_str = "N/A")%>%
set_formatter(values = list("Pr..F." = p_val_format) )%>%
font(fontname = "+font-family: Arial;")%>%
font(fontname = "+font-family: Arial;", part = "header")%>%
fontsize(size = 10.5, part = "header")%>%
fontsize(size = 10.5)%>%
bold(j = "Pr..F.", bold = TRUE)%>%
italic(italic = TRUE, part = "header")%>%
line_spacing(space = 1, part = "body")%>%
line_spacing(space = .5, part = "header")
anov1
save_as_image(anov1,"Anov_PAD_POB_ROVED_LIN.png")
tab_model(m.Dist1,file="plot.html")
tab_model(m.Dist1, wrap.labels = 80,
auto.label = FALSE, show.stat = TRUE, string.p = "p.value", string.ci = "CI 95%", dv.labels = "Perceived distance",
show.intercept = TRUE, show.aic = FALSE, show.zeroinf = TRUE, show.re.var = FALSE, show.reflvl = TRUE,
CSS = list(css.table = '+font-family: Arial;'),
pred.labels = c("Intercept","Target distance", "Condition (Floor level)","Target distance * Condition (Floor level)"),
file = "plot.html")
webshot("plot.html","Summary_PAD_POB_ROVED_LIN.png", vwidth = 600, vheight = 100)
tab_model(m.Dist1,file="plot.html")
tab_model(m.Dist1, wrap.labels = 80,
auto.label = FALSE, show.stat = TRUE, string.p = "p.value", string.ci = "CI 95%", dv.labels = "Perceived distance",
show.intercept = TRUE, show.aic = FALSE, show.zeroinf = TRUE, show.re.var = FALSE, show.reflvl = TRUE,
CSS = list(css.table = '+font-family: Arial;'),
pred.labels = c("Intercept","Target distance", "Condition (Floor level)","Target distance * Condition (Floor level)"),
file = "plot.html")
webshot("plot.html","Summary_PAD_POB_ROVED_LIN.png", vwidth = 600, vheight = 100)
extract_stats(ggcoefstats(m.Dist1))
filter(results_tbl,type == "ROVED")
# ROVED
m.Dist1 <-  lmer(perc_dist ~ target_distance*condition+(target_distance|subject),
data = filter(results_tbl,type == "ROVED"))
extract_stats(ggcoefstats(m.Dist1))
# ROVED
m.Dist1 <-  lmer(perc_dist ~ target_distance*condition+(target_distance|subject),
data = filter(results_tbl,type == "ROVED"))
extract_stats(ggcoefstats(m.Dist1))
anova(m.Dist1)
anov1 = anova(m.Dist1)
extract_stats(ggcoefstats(m.Dist1))
# ROVED
m.Dist1 <-  lmer(perc_dist ~ target_distance*condition+(1+target_distance|subject),
data = filter(results_tbl,type == "ROVED"))
extract_stats(ggcoefstats(m.Dist1))
# ROVED
m.Dist1 <-  lmer(perc_dist ~ target_distance*condition+(1+condition*target_distance|subject),
data = filter(results_tbl,type == "ROVED"))
extract_stats(ggcoefstats(m.Dist1))
anova(m.Dist1)
extract_stats(ggcoefstats(m.Dist1))
# ROVED
m.Dist1 <-  lmer(perc_dist ~ target_distance*condition+(1+condition*target_distance|subject),
data = filter(results_tbl,type == "ROVED"))
extract_stats(ggcoefstats(m.Dist1))
anova(m.Dist1)
anov1 = anova(m.Dist1)
table1 = filter(results_tbl,type == "ROVED")
table1$Model.6.fitted<-predict(m.Dist1)
FittedlmPlot6 <-ggplot()+
facet_grid(subject ~ condition, labeller=label_both)+
geom_line(data = table1, aes(x = target_distance, y =Model.6.fitted))+
geom_point(data = table1, aes(x = target_distance, y =perc_dist, group=subject,colour = subject), size=3)+
#  coord_cartesian(ylim = c(.03,.074))+
xlab("Distance source (m)")+ylab("Perceived distance (m)")
FittedlmPlot6
