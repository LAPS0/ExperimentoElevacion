geom_point(alpha = 0.4,
position = position_jitterdodge(jitter.width = .1,
jitter.height = 0,
dodge.width = .1 )) +
geom_point(data = tabla.raw, aes(x=target_distance, y = percived_distance, color = condition),
alpha = 0.4, size = .6,
position = position_jitterdodge(jitter.width = .1,
jitter.height = 0,
dodge.width = .1 )) +
scale_colour_manual(values = cbPalette) +
scale_fill_manual(values = cbPalette) +
geom_abline(slope = 1,
intercept = 0,
alpha = 0.5,
linetype = "dashed") +
# stat_summary(fun.data = "mean_se",
#              geom = "pointrange",
#              alpha = .4,
#              position = position_dodge(width = 1)) +
# stat_summary(fun.data = "mean_se",
#              geom = "linerange",
#              size=2,
#              position = position_dodge(width = 1)) +
#geom_text(x = .5, y = .9, label = as.character(as.expression(eq1)), parse = TRUE, size = 4, color = "#000000")+
#geom_text(x = .5, y = .76, label = as.character(as.expression(eq2)), parse = TRUE, size = 4, color = "#E69F00")+
scale_x_continuous(name="Distance source (m)", limits = c(-1,20)) +
scale_y_continuous(name="Perceived distance (m)",   limits = c(-1,20)) +
facet_grid(type ~ subject) +
theme_pubr(base_size = 12, margin = TRUE)+
theme(legend.position = "top",
legend.title = element_blank())
f.all
results_tbl %>%
clean_names() %>%
mutate(subject = factor(subject),
condition = factor(condition),
type = factor(type),
block = factor(block),
perc_dist_sd = percived_distance[,"sd"],
perc_dist_sem = percived_distance[,"sem"],
perc_dist_var = percived_distance[,"var"],
perc_dist_n = percived_distance[,"n"],
perc_dist = percived_distance[,"mean"],
rel_bias_signed_sd = rel_bias[,"sd"],
rel_bias_signed_sem = rel_bias[,"sem"],
rel_bias_signed_var = rel_bias[,"var"],
rel_bias_signed_n = rel_bias[,"n"],
rel_bias_signed = rel_bias[,"mean"],
abs_bias_sd = abs_bias[,"sd"],
abs_bias_sem = abs_bias[,"sem"],
abs_bias_var = abs_bias[,"var"],
abs_bias_n = abs_bias[,"n"],
abs_bias = abs_bias[,"mean"]) %>%
write_csv("./DatosUnificados/results.csv")
results_tbl <- read.csv("./DatosUnificados/results.csv", header = TRUE, sep = ',', stringsAsFactors = TRUE)
### Analysis Slopes -----
results_tbl$slope = 0
fig_normal = list()
for (i in 1:length(levels(results_tbl$subject))) {
print(i)
sub = levels(results_tbl$subject)[i]
print(sub)
m.pend = lm(percived_distance ~ target_distance*condition,
data = filter(results_tbl,type == "NORMAL", subject == sub))
results_tbl[(results_tbl$type == "NORMAL" & results_tbl$subject == sub &results_tbl$condition == "Ear level"),]$slope = m.pend$coefficients[[2]]
results_tbl[(results_tbl$type == "NORMAL" & results_tbl$subject == sub &results_tbl$condition == "Floor level"),]$slope = m.pend$coefficients[[2]]+m.pend$coefficients[[4]]
cbPalette <- c("#000000","#E69F00","#009E73", "#999999", "#D55E00", "#0072B2", "#CC79A7", "#F0E442")
eq1 <- substitute("Ear level:"~~~italic(y) == a %.% italic(X)+italic((b)),
list(a = round(m.pend$coefficients[[2]],digits = 2),
b = round(m.pend$coefficients[[1]], digits = 2)))
eq2 <- substitute("Floor level:"~~~italic(y) == a %.% italic(X)+italic((b)),
list(a = round(m.pend$coefficients[[2]]+m.pend$coefficients[[4]], digits = 2),
b = round(m.pend$coefficients[[1]]+m.pend$coefficients[[3]], digits = 2)))
eq3 <- substitute("r.squared:"~~~italic(R)^italic(2) == italic(b),
list(b = round(summary(m.pend)$r.squared, digits = 2)))
fig1 = ggplot(filter(results_tbl,type == "NORMAL", subject == sub),
aes(x = target_distance, y = perc_dist, ymin = perc_dist-perc_dist_sem, ymax = perc_dist+perc_dist_sem,
colour = condition, fill = condition, group = condition))+
geom_pointrange(alpha = 0.4,
position = position_jitterdodge(jitter.width = .1,
jitter.height = 0,
dodge.width = .1 ))+
scale_colour_manual(values = cbPalette) +
scale_fill_manual(values = cbPalette) +
geom_abline(slope = 1,
intercept = 0,
alpha = 0.5,
linetype = "dashed") +
geom_abline(slope = m.pend$coefficients[[2]],
intercept = m.pend$coefficients[[1]],
alpha = 0.5,
color = "#000000") +
geom_abline(slope = m.pend$coefficients[[2]]+m.pend$coefficients[[4]],
intercept = m.pend$coefficients[[1]]+m.pend$coefficients[[3]],
alpha = 0.5,
color = "#E69F00") +
geom_text(x = 0.2, y = 6.6, label = sub, hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#999999")+
geom_text(x = 0.2, y = 6.1, label = as.character(as.expression(eq1)), hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#000000")+
geom_text(x = 0.2, y = 5.7, label = as.character(as.expression(eq2)), hjust = 0, nudge_x =  0,parse = TRUE, size = 4, color = "#E69F00")+
geom_text(x = 0.2, y = 5.3, label = as.character(as.expression(eq3)), hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#009E73")+
scale_x_continuous(name="Distance source (m)", limits = c(0,8)) +
scale_y_continuous(name="Perceived distance (m)",   limits = c(0,8)) +
theme_pubr(base_size = 12, margin = TRUE)+
theme(legend.position = "top",
legend.title = element_blank())
fig_normal[[i]] = fig1
}
View(results_tbl)
tabla.ind.Eye <- results_tbl %>%
filter(condition == "Ear level", type == "NORMAL") %>%
group_by(subject,condition) %>%
summarise(msolpe  = mean(slope,na.rm=TRUE))  %>%
ungroup()
tabla.ind.Eye <- results_tbl %>%
filter(condition == "Ear level", type == "NORMAL") %>%
group_by(subject,condition) %>%
summarise(msolpe  = mean(slope,na.rm=TRUE))  %>%
ungroup()
res3 <- outliers_mad(x = tabla.ind.Eye$mslope ,na.rm=TRUE)
tabla.ind.Eye <- results_tbl %>%
filter(condition == "Ear level", type == "NORMAL") %>%
group_by(subject,condition) %>%
summarise(msolpe  = mean(slope,na.rm=TRUE))  %>%
ungroup()
res3 <- outliers_mad(x = tabla.ind.Eye$mslope ,na.rm=TRUE)
View(tabla.ind.Eye)
tabla.ind.Eye <- results_tbl %>%
filter(condition == "Ear level", type == "NORMAL") %>%
group_by(subject,condition) %>%
summarise(mslope  = mean(slope,na.rm=TRUE))  %>%
ungroup()
tabla.ind.Eye <- results_tbl %>%
filter(condition == "Ear level", type == "NORMAL") %>%
group_by(subject,condition) %>%
summarise(mslope  = mean(slope,na.rm=TRUE))  %>%
ungroup()
res3 <- outliers_mad(x = tabla.ind.Eye$mslope ,na.rm=TRUE)
#plot_outliers_mad(res3,x=tabla.ind.Eye$mSesgoRel,pos_display=TRUE)
tabla.ind.Eye[res3$outliers_pos,]
tabla.ind.Floor <- results_tbl %>%
filter(condition == "Floor level", type == "NORMAL") %>%
group_by(subject,condition) %>%
summarise(mslope  = mean(slope,na.rm=TRUE))  %>%
ungroup()
res3 <- outliers_mad(x = tabla.ind.Floor$mslope ,na.rm=TRUE)
#plot_outliers_mad(res3,x=tabla.ind.Floor$mSesgoRel,pos_display=TRUE)
tabla.ind.Floor[res3$outliers_pos,]
#Distance ------
#percived_distance and target_distance lin
m.Dist.lin <-  lmer(percived_distance ~ target_distance*condition + (target_distance|subject),
data = filter(results_tbl,type == "NORMAL"))
extract_stats(ggcoefstats(m.Dist.lin))
anova(m.Dist.lin)
results_tbl$Predsubject.lin = fitted(m.Dist.lin, level=1)
tabla.pob = filter(results_tbl,type == "NORMAL") %>% group_by(target_distance,condition) %>%
summarise(Mperc_dist  = mean(percived_distance))  %>%
ungroup()
tabla.pob$PredPob.lin = 0
idx = tabla.pob$condition == "Ear level"
tabla.pob[idx,]$PredPob.lin = 0.3322*c(2,2.9,4.2,6)+0.9702
idx = tabla.pob$condition == "Floor level"
tabla.pob[idx,]$PredPob.lin = (0.3322+0.3351)*c(2,2.9,4.2,6)+(0.9702-0.8352)
cbPalette <- c("#000000","#E69F00","#009E73", "#999999", "#D55E00", "#0072B2", "#CC79A7", "#F0E442")
f1 <- ggplot(tabla.pob, aes(x=target_distance, y =PredPob.lin, group = condition, color  = condition)) +
geom_line(size = 2)+
# geom_line(data = results_tbl, aes(x=target_distance, y = PredPob.lin, color = condition), size = 1.5) +
geom_abline(intercept = 0, slope = 1, linetype=2) +
geom_line(data = filter(results_tbl,type == "NORMAL"), mapping = aes(x=target_distance, y=Predsubject.lin, group = interaction(subject,condition)) ,
alpha=.4, size=0.4)+
scale_colour_manual(values = cbPalette) +
scale_fill_manual(values = cbPalette) +
ggtitle("Lineal Normal")+
#geom_text(x = .5, y = .9, label = as.character(as.expression(eq1)), parse = TRUE, size = 4, color = "#000000")+
#geom_text(x = .5, y = .76, label = as.character(as.expression(eq2)), parse = TRUE, size = 4, color = "#E69F00")+
scale_x_continuous(name="Distance source (m)", breaks=c(0,2,2.9,4.2,6,7), labels=c("",2,2.9,4.2,6,""), minor_breaks=NULL, limits = c(0,8)) +
scale_y_continuous(name="Perceived distance (m)",  breaks=c(0,2,2.9,4.2,6,7), labels=c("",2,2.9,4.2,6,""), minor_breaks=NULL, limits = c(0,8)) +
theme_pubr(base_size = 12, margin = TRUE)+
theme(legend.position = "top",
legend.title = element_blank())
f1
### Analysis Slopes -----
results_tbl$slope = 0
results_tbl$intercepto = 0
fig_normal = list()
for (i in 1:length(levels(results_tbl$subject))) {
print(i)
sub = levels(results_tbl$subject)[i]
print(sub)
m.pend = lm(percived_distance ~ target_distance*condition,
data = filter(results_tbl,type == "NORMAL", subject == sub))
results_tbl[(results_tbl$type == "NORMAL" & results_tbl$subject == sub &results_tbl$condition == "Ear level"),]$slope = m.pend$coefficients[[2]]
results_tbl[(results_tbl$type == "NORMAL" & results_tbl$subject == sub &results_tbl$condition == "Floor level"),]$slope = m.pend$coefficients[[2]]+m.pend$coefficients[[4]]
results_tbl[(results_tbl$type == "NORMAL" & results_tbl$subject == sub &results_tbl$condition == "Ear level"),]$intercepto = m.pend$coefficients[[1]]
results_tbl[(results_tbl$type == "NORMAL" & results_tbl$subject == sub &results_tbl$condition == "Floor level"),]$intercepto = m.pend$coefficients[[1]]+m.pend$coefficients[[3]]
cbPalette <- c("#000000","#E69F00","#009E73", "#999999", "#D55E00", "#0072B2", "#CC79A7", "#F0E442")
eq1 <- substitute("Ear level:"~~~italic(y) == a %.% italic(X)+italic((b)),
list(a = round(m.pend$coefficients[[2]],digits = 2),
b = round(m.pend$coefficients[[1]], digits = 2)))
eq2 <- substitute("Floor level:"~~~italic(y) == a %.% italic(X)+italic((b)),
list(a = round(m.pend$coefficients[[2]]+m.pend$coefficients[[4]], digits = 2),
b = round(m.pend$coefficients[[1]]+m.pend$coefficients[[3]], digits = 2)))
eq3 <- substitute("r.squared:"~~~italic(R)^italic(2) == italic(b),
list(b = round(summary(m.pend)$r.squared, digits = 2)))
fig1 = ggplot(filter(results_tbl,type == "NORMAL", subject == sub),
aes(x = target_distance, y = perc_dist, ymin = perc_dist-perc_dist_sem, ymax = perc_dist+perc_dist_sem,
colour = condition, fill = condition, group = condition))+
geom_pointrange(alpha = 0.4,
position = position_jitterdodge(jitter.width = .1,
jitter.height = 0,
dodge.width = .1 ))+
scale_colour_manual(values = cbPalette) +
scale_fill_manual(values = cbPalette) +
geom_abline(slope = 1,
intercept = 0,
alpha = 0.5,
linetype = "dashed") +
geom_abline(slope = m.pend$coefficients[[2]],
intercept = m.pend$coefficients[[1]],
alpha = 0.5,
color = "#000000") +
geom_abline(slope = m.pend$coefficients[[2]]+m.pend$coefficients[[4]],
intercept = m.pend$coefficients[[1]]+m.pend$coefficients[[3]],
alpha = 0.5,
color = "#E69F00") +
geom_text(x = 0.2, y = 6.6, label = sub, hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#999999")+
geom_text(x = 0.2, y = 6.1, label = as.character(as.expression(eq1)), hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#000000")+
geom_text(x = 0.2, y = 5.7, label = as.character(as.expression(eq2)), hjust = 0, nudge_x =  0,parse = TRUE, size = 4, color = "#E69F00")+
geom_text(x = 0.2, y = 5.3, label = as.character(as.expression(eq3)), hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#009E73")+
scale_x_continuous(name="Distance source (m)", limits = c(0,8)) +
scale_y_continuous(name="Perceived distance (m)",   limits = c(0,8)) +
theme_pubr(base_size = 12, margin = TRUE)+
theme(legend.position = "top",
legend.title = element_blank())
fig_normal[[i]] = fig1
}
# Figure lm for ROVED
fig_roved = list()
for (i in 1:length(levels(results_tbl$subject))) {
print(i)
sub = levels(results_tbl$subject)[i]
print(sub)
m.pend = lm(percived_distance ~ target_distance*condition,
data = filter(results_tbl,type == "ROVED", subject == sub))
results_tbl[(results_tbl$type == "ROVED" & results_tbl$subject == sub &results_tbl$condition == "Ear level"),]$slope = m.pend$coefficients[[2]]
results_tbl[(results_tbl$type == "ROVED" & results_tbl$subject == sub &results_tbl$condition == "Floor level"),]$slope = m.pend$coefficients[[2]]+m.pend$coefficients[[4]]
results_tbl[(results_tbl$type == "ROVED" & results_tbl$subject == sub &results_tbl$condition == "Ear level"),]$intercepto = m.pend$coefficients[[1]]
results_tbl[(results_tbl$type == "ROVED" & results_tbl$subject == sub &results_tbl$condition == "Floor level"),]$intercepto = m.pend$coefficients[[1]]+m.pend$coefficients[[3]]
cbPalette <- c("#000000","#E69F00","#009E73", "#999999", "#D55E00", "#0072B2", "#CC79A7", "#F0E442")
eq1 <- substitute("Ear level:"~~~italic(y) == a %.% italic(X)+italic((b)),
list(a = round(m.pend$coefficients[[2]],digits = 2),
b = round(m.pend$coefficients[[1]], digits = 2)))
eq2 <- substitute("Floor level:"~~~italic(y) == a %.% italic(X)+italic((b)),
list(a = round(m.pend$coefficients[[2]]+m.pend$coefficients[[4]], digits = 2),
b = round(m.pend$coefficients[[1]]+m.pend$coefficients[[3]], digits = 2)))
eq3 <- substitute("r.squared:"~~~italic(R)^italic(2) == italic(b),
list(b = round(summary(m.pend)$r.squared, digits = 2)))
fig2 = ggplot(filter(results_tbl,type == "ROVED", subject == sub),
aes(x = target_distance, y = perc_dist, ymin = perc_dist-perc_dist_sem, ymax = perc_dist+perc_dist_sem,
colour = condition, fill = condition, group = condition))+
geom_pointrange(alpha = 0.4,
position = position_jitterdodge(jitter.width = .1,
jitter.height = 0,
dodge.width = .1 ))+
scale_colour_manual(values = cbPalette) +
scale_fill_manual(values = cbPalette) +
geom_abline(slope = 1,
intercept = 0,
alpha = 0.5,
linetype = "dashed") +
geom_abline(slope = m.pend$coefficients[[2]],
intercept = m.pend$coefficients[[1]],
alpha = 0.5,
color = "#000000") +
geom_abline(slope = m.pend$coefficients[[2]]+m.pend$coefficients[[4]],
intercept = m.pend$coefficients[[1]]+m.pend$coefficients[[3]],
alpha = 0.5,
color = "#E69F00") +
geom_text(x = 0.2, y = 6.6, label = sub, hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#999999")+
geom_text(x = 0.2, y = 6.1, label = as.character(as.expression(eq1)), hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#000000")+
geom_text(x = 0.2, y = 5.7, label = as.character(as.expression(eq2)), hjust = 0, nudge_x =  0,parse = TRUE, size = 4, color = "#E69F00")+
geom_text(x = 0.2, y = 5.3, label = as.character(as.expression(eq3)), hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#009E73")+
scale_x_continuous(name="Distance source (m)", limits = c(0,8)) +
scale_y_continuous(name="Perceived distance (m)",   limits = c(0,8)) +
theme_pubr(base_size = 12, margin = TRUE)+
theme(legend.position = "top",
legend.title = element_blank())
fig_roved[[i]] = fig2
}
f3 =  ggplot(results_tbl, aes(x = condition,y = slope, colour = condition, fill = condition)) +
geom_line(aes(group = subject), alpha = 0.3)+
geom_point(alpha = 1) +
scale_colour_manual(values = cbPalette) +
scale_fill_manual(values = cbPalette) +
geom_abline(slope = 0,
intercept = 0,
alpha = 0.5,
linetype = "dashed") +
stat_summary(fun.data = "mean_se",
geom = "pointrange",
alpha = 1,
size = 1,
# position = position_dodge(width = 1)
position = position_jitterdodge(jitter.width = 0.6,
jitter.height = 0,
dodge.width = 0 )) +
# stat_summary(fun.data = "mean_se",
#              geom = "linerange",
#              size=2,
#              position = position_dodge(width = 1)) +
labs(x = "Condition",
y = "Slope with LM") +
facet_grid(. ~ type) +
theme_pubr(base_size = 12, margin = TRUE)+
theme(legend.position = "none")
f3
f3 =  ggplot(results_tbl, aes(x = condition,y = intercepto, colour = condition, fill = condition)) +
geom_line(aes(group = subject), alpha = 0.3)+
geom_point(alpha = 1) +
scale_colour_manual(values = cbPalette) +
scale_fill_manual(values = cbPalette) +
geom_abline(slope = 0,
intercept = 0,
alpha = 0.5,
linetype = "dashed") +
stat_summary(fun.data = "mean_se",
geom = "pointrange",
alpha = 1,
size = 1,
# position = position_dodge(width = 1)
position = position_jitterdodge(jitter.width = 0.6,
jitter.height = 0,
dodge.width = 0 )) +
# stat_summary(fun.data = "mean_se",
#              geom = "linerange",
#              size=2,
#              position = position_dodge(width = 1)) +
labs(x = "Condition",
y = "Slope with LM") +
facet_grid(. ~ type) +
theme_pubr(base_size = 12, margin = TRUE)+
theme(legend.position = "none")
f3
f3 =  ggplot(results_tbl, aes(x = condition,y = intercepto, colour = condition, fill = condition)) +
geom_line(aes(group = subject), alpha = 0.3)+
geom_point(alpha = 1) +
scale_colour_manual(values = cbPalette) +
scale_fill_manual(values = cbPalette) +
geom_abline(slope = 0,
intercept = 0,
alpha = 0.5,
linetype = "dashed") +
stat_summary(fun.data = "mean_se",
geom = "pointrange",
alpha = 1,
size = 1,
# position = position_dodge(width = 1)
position = position_jitterdodge(jitter.width = 0.6,
jitter.height = 0,
dodge.width = 0 )) +
# stat_summary(fun.data = "mean_se",
#              geom = "linerange",
#              size=2,
#              position = position_dodge(width = 1)) +
labs(x = "Condition",
y = "Intercepto with LM") +
facet_grid(. ~ type) +
theme_pubr(base_size = 12, margin = TRUE)+
theme(legend.position = "none")
f3
mi_nombre_de_archivo = paste(figures_folder, .Platform$file.sep, "4. Lm Intercepto", ".png", sep = '')
ggsave(mi_nombre_de_archivo, plot=f4, width=15, height=10, units="cm", limitsize=FALSE, dpi=600)
f4 =  ggplot(results_tbl, aes(x = condition,y = intercepto, colour = condition, fill = condition)) +
geom_line(aes(group = subject), alpha = 0.3)+
geom_point(alpha = 1) +
scale_colour_manual(values = cbPalette) +
scale_fill_manual(values = cbPalette) +
geom_abline(slope = 0,
intercept = 0,
alpha = 0.5,
linetype = "dashed") +
stat_summary(fun.data = "mean_se",
geom = "pointrange",
alpha = 1,
size = 1,
# position = position_dodge(width = 1)
position = position_jitterdodge(jitter.width = 0.6,
jitter.height = 0,
dodge.width = 0 )) +
# stat_summary(fun.data = "mean_se",
#              geom = "linerange",
#              size=2,
#              position = position_dodge(width = 1)) +
labs(x = "Condition",
y = "Intercepto with LM") +
facet_grid(. ~ type) +
theme_pubr(base_size = 12, margin = TRUE)+
theme(legend.position = "none")
f4
mi_nombre_de_archivo = paste(figures_folder, .Platform$file.sep, "4. Lm Intercepto", ".png", sep = '')
ggsave(mi_nombre_de_archivo, plot=f4, width=15, height=10, units="cm", limitsize=FALSE, dpi=600)
tabla.ind.Eye <- results_tbl %>%
filter(condition == "Ear level", type == "NORMAL") %>%
group_by(subject,condition) %>%
summarise(minter  = mean(intercepto,na.rm=TRUE))  %>%
ungroup()
res3 <- outliers_mad(x = tabla.ind.Eye$minter ,na.rm=TRUE)
#plot_outliers_mad(res3,x=tabla.ind.Eye$mSesgoRel,pos_display=TRUE)
tabla.ind.Eye[res3$outliers_pos,]
tabla.ind.Floor <- results_tbl %>%
filter(condition == "Floor level", type == "NORMAL") %>%
group_by(subject,condition) %>%
summarise(minter  = mean(intercepto,na.rm=TRUE))  %>%
ungroup()
res3 <- outliers_mad(x = tabla.ind.Floor$minter ,na.rm=TRUE)
#plot_outliers_mad(res3,x=tabla.ind.Floor$mSesgoRel,pos_display=TRUE)
tabla.ind.Floor[res3$outliers_pos,]
tabla.ind.Eye <- results_tbl %>%
filter(condition == "Ear level", type == "NORMAL") %>%
group_by(subject,condition) %>%
summarise(minter  = mean(intercepto,na.rm=TRUE))  %>%
ungroup()
res3 <- outliers_mad(x = tabla.ind.Eye$minter ,na.rm=TRUE)
#plot_outliers_mad(res3,x=tabla.ind.Eye$mSesgoRel,pos_display=TRUE)
tabla.ind.Eye[res3$outliers_pos,]
tabla.ind.Floor <- results_tbl %>%
filter(condition == "Floor level", type == "NORMAL") %>%
group_by(subject,condition) %>%
summarise(minter  = mean(intercepto,na.rm=TRUE))  %>%
ungroup()
res3 <- outliers_mad(x = tabla.ind.Floor$minter ,na.rm=TRUE)
#plot_outliers_mad(res3,x=tabla.ind.Floor$mSesgoRel,pos_display=TRUE)
tabla.ind.Floor[res3$outliers_pos,]
View(results_tbl)
f4 =  ggplot(results_tbl, aes(x = condition,y = intercepto, colour = condition, fill = condition)) +
geom_line(aes(group = subject), alpha = 0.3)+
geom_point(alpha = 1) +
scale_colour_manual(values = cbPalette) +
scale_fill_manual(values = cbPalette) +
geom_abline(slope = 0,
intercept = 0,
alpha = 0.5,
linetype = "dashed") +
stat_summary(fun.data = "mean_se",
geom = "pointrange",
alpha = 1,
size = 1,
# position = position_dodge(width = 1)
position = position_jitterdodge(jitter.width = 0.6,
jitter.height = 0,
dodge.width = 0 )) +
# stat_summary(fun.data = "mean_se",
#              geom = "linerange",
#              size=2,
#              position = position_dodge(width = 1)) +
labs(x = "Condition",
y = "Intercepto with LM") +
facet_grid(. ~ type) +
theme_pubr(base_size = 12, margin = TRUE)+
theme(legend.position = "none")
f4
tabla.ind.Eye <- results_tbl %>%
filter(condition == "Ear level", type == "NORMAL") %>%
group_by(subject,condition) %>%
summarise(minter  = mean(intercepto,na.rm=TRUE))  %>%
ungroup()
res3 <- outliers_mad(x = tabla.ind.Eye$minter ,na.rm=TRUE)
#plot_outliers_mad(res3,x=tabla.ind.Eye$mSesgoRel,pos_display=TRUE)
tabla.ind.Eye[res3$outliers_pos,]
tabla.ind.Floor <- results_tbl %>%
filter(condition == "Floor level", type == "NORMAL") %>%
group_by(subject,condition) %>%
summarise(minter  = mean(intercepto,na.rm=TRUE))  %>%
ungroup()
res3 <- outliers_mad(x = tabla.ind.Floor$minter ,na.rm=TRUE)
#plot_outliers_mad(res3,x=tabla.ind.Floor$mSesgoRel,pos_display=TRUE)
tabla.ind.Floor[res3$outliers_pos,]
## Bias signed-----
f2 <- filter(results_tbl,type == "NORMAL") %>%
group_by(subject,condition) %>%
summarise(mSesgoRel  = mean(rel_bias)) %>%
ungroup() %>%
ggplot(aes(x = condition,y = 100*mSesgoRel,colour = condition, fill = condition)) +
geom_point(alpha = 0.4,
position = position_jitterdodge(jitter.width = .3,
jitter.height = 0,
dodge.width = 1 )) +
scale_colour_manual(values = cbPalette) +
scale_fill_manual(values = cbPalette) +
geom_abline(slope = 0,
intercept = 0,
alpha = 0.5,
linetype = "dashed") +
stat_summary(fun.data = "mean_se",
geom = "bar",
alpha = .4,
position = position_dodge(width = 1)) +
stat_summary(fun.data = "mean_se",
geom = "linerange",
size=2,
position = position_dodge(width = 1)) +
labs(x = "Condition",
y = "Relative signed \nbias [%]") +
theme_pubr(base_size = 12, margin = TRUE)+
theme(legend.position = "none")
f2
aaa <- filter(results_tbl,type == "NORMAL") %>%
group_by(subject,condition) %>%
summarise(mSesgoRel  = mean(rel_bias)) %>%
ungroup()
m.RelativBias <- lm(mSesgoRel ~ condition,
data = aaa)
anova(m.RelativBias)
