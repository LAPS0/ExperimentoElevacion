# # geom_function(fun = earlevel, colour = "#000000")+
# geom_function(fun = bfloorlevel, colour = "#E69F00")+
# stat_function(fun = bearlevel, colour = "#000000")+
geom_line(filter(curve, condition == "Ear level"), mapping = aes(x = x2, y = y1))+
geom_text(x = 0.2, y = 7.6, label = sub, hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#999999")+
geom_text(x = 0.2, y = 7.1, label = as.character(as.expression(eq1)), hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#000000")+
geom_text(x = 0.2, y = 6.7, label = as.character(as.expression(eq2)), hjust = 0, nudge_x =  0,parse = TRUE, size = 4, color = "#E69F00")+
geom_text(x = 0.2, y = 6.3, label = as.character(as.expression(eq3)), hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#009E73")+
scale_x_continuous(name="Distance source (m)", limits = c(0,8)) +
scale_y_continuous(name="Perceived distance (m)",   limits = c(0,8)) +
theme_pubr(base_size = 12, margin = TRUE)+
theme(legend.position = "top",
legend.title = element_blank())
fig1
ggplot(curve, aes(x=x2,y=y1, color=condition))+geom_line()
fig1 = ggplot(filter(results_tbl,type == "NORMAL", subject == sub),
aes(x = target_distance, y = perc_dist, ymin = perc_dist-perc_dist_sem, ymax = perc_dist+perc_dist_sem,
colour = condition, fill = condition, group = condition))+
geom_pointrange(alpha = 0.4,
position = position_jitterdodge(jitter.width = .1,
jitter.height = 0,
dodge.width = .1 ))+
scale_colour_manual(values = cbPalette) +
scale_fill_manual(values = cbPalette) +
geom_abline(slope = 1,
intercept = 0,
alpha = 0.5,
linetype = "dashed") +
# # geom_function(fun = earlevel, colour = "#000000")+
# geom_function(fun = bfloorlevel, colour = "#E69F00")+
# stat_function(fun = bearlevel, colour = "#000000")+
# geom_line(filter(curve, condition == "Ear level"), mapping = aes(x = x2, y = y1))+
geom_text(x = 0.2, y = 7.6, label = sub, hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#999999")+
geom_text(x = 0.2, y = 7.1, label = as.character(as.expression(eq1)), hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#000000")+
geom_text(x = 0.2, y = 6.7, label = as.character(as.expression(eq2)), hjust = 0, nudge_x =  0,parse = TRUE, size = 4, color = "#E69F00")+
geom_text(x = 0.2, y = 6.3, label = as.character(as.expression(eq3)), hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#009E73")+
scale_x_continuous(name="Distance source (m)", limits = c(0,8)) +
scale_y_continuous(name="Perceived distance (m)",   limits = c(0,8)) +
theme_pubr(base_size = 12, margin = TRUE)+
theme(legend.position = "top",
legend.title = element_blank())
fig1
fig1 = ggplot(filter(results_tbl,type == "NORMAL", subject == sub),
aes(x = target_distance, y = perc_dist, ymin = perc_dist-perc_dist_sem, ymax = perc_dist+perc_dist_sem,
colour = condition, fill = condition, group = condition))+
geom_pointrange(alpha = 0.4,
position = position_jitterdodge(jitter.width = .1,
jitter.height = 0,
dodge.width = .1 ))+
geom_line(filter(curve, condition == "Ear level"), mapping = aes(x = x2, y = y1))+
scale_colour_manual(values = cbPalette) +
scale_fill_manual(values = cbPalette) +
geom_abline(slope = 1,
intercept = 0,
alpha = 0.5,
linetype = "dashed") +
# # geom_function(fun = earlevel, colour = "#000000")+
# geom_function(fun = bfloorlevel, colour = "#E69F00")+
# stat_function(fun = bearlevel, colour = "#000000")+
geom_text(x = 0.2, y = 7.6, label = sub, hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#999999")+
geom_text(x = 0.2, y = 7.1, label = as.character(as.expression(eq1)), hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#000000")+
geom_text(x = 0.2, y = 6.7, label = as.character(as.expression(eq2)), hjust = 0, nudge_x =  0,parse = TRUE, size = 4, color = "#E69F00")+
geom_text(x = 0.2, y = 6.3, label = as.character(as.expression(eq3)), hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#009E73")+
scale_x_continuous(name="Distance source (m)", limits = c(0,8)) +
scale_y_continuous(name="Perceived distance (m)",   limits = c(0,8)) +
theme_pubr(base_size = 12, margin = TRUE)+
theme(legend.position = "top",
legend.title = element_blank())
fig1
curve = as.tbl(curve)
curve = as_tibble(curve)
fig1 = ggplot(filter(results_tbl,type == "NORMAL", subject == sub),
aes(x = target_distance, y = perc_dist, ymin = perc_dist-perc_dist_sem, ymax = perc_dist+perc_dist_sem,
colour = condition, fill = condition, group = condition))+
geom_pointrange(alpha = 0.4,
position = position_jitterdodge(jitter.width = .1,
jitter.height = 0,
dodge.width = .1 ))+
geom_line(data = curve, mapping = aes(x = x2, y = y1))+
scale_colour_manual(values = cbPalette) +
scale_fill_manual(values = cbPalette) +
geom_abline(slope = 1,
intercept = 0,
alpha = 0.5,
linetype = "dashed") +
# # geom_function(fun = earlevel, colour = "#000000")+
# geom_function(fun = bfloorlevel, colour = "#E69F00")+
# stat_function(fun = bearlevel, colour = "#000000")+
geom_text(x = 0.2, y = 7.6, label = sub, hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#999999")+
geom_text(x = 0.2, y = 7.1, label = as.character(as.expression(eq1)), hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#000000")+
geom_text(x = 0.2, y = 6.7, label = as.character(as.expression(eq2)), hjust = 0, nudge_x =  0,parse = TRUE, size = 4, color = "#E69F00")+
geom_text(x = 0.2, y = 6.3, label = as.character(as.expression(eq3)), hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#009E73")+
scale_x_continuous(name="Distance source (m)", limits = c(0,8)) +
scale_y_continuous(name="Perceived distance (m)",   limits = c(0,8)) +
theme_pubr(base_size = 12, margin = TRUE)+
theme(legend.position = "top",
legend.title = element_blank())
fig1
fig1 = ggplot(filter(results_tbl,type == "NORMAL", subject == sub),
aes(x = target_distance, y = perc_dist, ymin = perc_dist-perc_dist_sem, ymax = perc_dist+perc_dist_sem,
colour = condition, fill = condition, group = condition))+
geom_pointrange(alpha = 0.4,
position = position_jitterdodge(jitter.width = .1,
jitter.height = 0,
dodge.width = .1 ))+
# geom_line(data = curve, mapping = aes(x = x2, y = y1))+
scale_colour_manual(values = cbPalette) +
scale_fill_manual(values = cbPalette) +
geom_abline(slope = 1,
intercept = 0,
alpha = 0.5,
linetype = "dashed") +
# # geom_function(fun = earlevel, colour = "#000000")+
# geom_function(fun = bfloorlevel, colour = "#E69F00")+
# stat_function(fun = bearlevel, colour = "#000000")+
geom_text(x = 0.2, y = 7.6, label = sub, hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#999999")+
geom_text(x = 0.2, y = 7.1, label = as.character(as.expression(eq1)), hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#000000")+
geom_text(x = 0.2, y = 6.7, label = as.character(as.expression(eq2)), hjust = 0, nudge_x =  0,parse = TRUE, size = 4, color = "#E69F00")+
geom_text(x = 0.2, y = 6.3, label = as.character(as.expression(eq3)), hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#009E73")+
scale_x_continuous(name="Distance source (m)", limits = c(0,8)) +
scale_y_continuous(name="Perceived distance (m)",   limits = c(0,8)) +
theme_pubr(base_size = 12, margin = TRUE)+
theme(legend.position = "top",
legend.title = element_blank())
fig1
results_tbl$target_distance
x1 = c(2,2.9,4.2,6)
# x1 = seq(1,8,by=.01)
curves1 = data.frame(x2 = x1,
y1 = (10^(m.pend$coefficients[[1]]))*(x1^m.pend$coefficients[[2]]),
condition = "Ear level")
curves2 = data.frame(x2 = x1,
y1 = 10^(m.pend$coefficients[[1]]+m.pend$coefficients[[3]])*(x1^(m.pend$coefficients[[2]]+m.pend$coefficients[[4]])),
condition = "Floor level")
curve = merge(x = curves1, y = curves2, all = TRUE)
# bearlevel = function(x) (10^(m.pend$coefficients[[1]]))*(x^m.pend$coefficients[[2]])
# bfloorlevel = function(x) (10^(m.pend$coefficients[[1]]+m.pend$coefficients[[3]]))*(x^(m.pend$coefficients[[2]]+m.pend$coefficients[[4]]))
#
eq1 <- substitute("Ear level:"~~~italic(y) == a %.% italic(X)^italic((b)),
list(a = round(10^(m.pend$coefficients[[1]]),digits = 2),
b = round(m.pend$coefficients[[2]], digits = 2)))
eq2 <- substitute("Floor level:"~~~italic(y) == a %.% italic(X)^italic((b)),
list(a = round(10^(m.pend$coefficients[[1]]+m.pend$coefficients[[3]]), digits = 2),
b = round(m.pend$coefficients[[2]]+m.pend$coefficients[[4]], digits = 2)))
eq3 <- substitute("r.squared:"~~~italic(R)^italic(2) == italic(b),
list(b = round(summary(m.pend)$r.squared, digits = 2)))
fig1 = ggplot(filter(results_tbl,type == "NORMAL", subject == sub),
aes(x = target_distance, y = perc_dist, ymin = perc_dist-perc_dist_sem, ymax = perc_dist+perc_dist_sem,
colour = condition, fill = condition, group = condition))+
geom_pointrange(alpha = 0.4,
position = position_jitterdodge(jitter.width = .1,
jitter.height = 0,
dodge.width = .1 ))+
# geom_line(data = curve, mapping = aes(x = x2, y = y1))+
scale_colour_manual(values = cbPalette) +
scale_fill_manual(values = cbPalette) +
geom_abline(slope = 1,
intercept = 0,
alpha = 0.5,
linetype = "dashed") +
# # geom_function(fun = earlevel, colour = "#000000")+
# geom_function(fun = bfloorlevel, colour = "#E69F00")+
# stat_function(fun = bearlevel, colour = "#000000")+
geom_text(x = 0.2, y = 7.6, label = sub, hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#999999")+
geom_text(x = 0.2, y = 7.1, label = as.character(as.expression(eq1)), hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#000000")+
geom_text(x = 0.2, y = 6.7, label = as.character(as.expression(eq2)), hjust = 0, nudge_x =  0,parse = TRUE, size = 4, color = "#E69F00")+
geom_text(x = 0.2, y = 6.3, label = as.character(as.expression(eq3)), hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#009E73")+
scale_x_continuous(name="Distance source (m)", limits = c(0,8)) +
scale_y_continuous(name="Perceived distance (m)",   limits = c(0,8)) +
theme_pubr(base_size = 12, margin = TRUE)+
theme(legend.position = "top",
legend.title = element_blank())
fig1
fig1 = ggplot(filter(results_tbl,type == "NORMAL", subject == sub),
aes(x = target_distance, y = perc_dist, ymin = perc_dist-perc_dist_sem, ymax = perc_dist+perc_dist_sem,
colour = condition, fill = condition, group = condition))+
geom_pointrange(alpha = 0.4,
position = position_jitterdodge(jitter.width = .1,
jitter.height = 0,
dodge.width = .1 ))+
geom_line(data = curve, mapping = aes(x = x2, y = y1))+
scale_colour_manual(values = cbPalette) +
scale_fill_manual(values = cbPalette) +
geom_abline(slope = 1,
intercept = 0,
alpha = 0.5,
linetype = "dashed") +
# # geom_function(fun = earlevel, colour = "#000000")+
# geom_function(fun = bfloorlevel, colour = "#E69F00")+
# stat_function(fun = bearlevel, colour = "#000000")+
geom_text(x = 0.2, y = 7.6, label = sub, hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#999999")+
geom_text(x = 0.2, y = 7.1, label = as.character(as.expression(eq1)), hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#000000")+
geom_text(x = 0.2, y = 6.7, label = as.character(as.expression(eq2)), hjust = 0, nudge_x =  0,parse = TRUE, size = 4, color = "#E69F00")+
geom_text(x = 0.2, y = 6.3, label = as.character(as.expression(eq3)), hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#009E73")+
scale_x_continuous(name="Distance source (m)", limits = c(0,8)) +
scale_y_continuous(name="Perceived distance (m)",   limits = c(0,8)) +
theme_pubr(base_size = 12, margin = TRUE)+
theme(legend.position = "top",
legend.title = element_blank())
fig1
fig1 = ggplot(filter(results_tbl,type == "NORMAL", subject == sub),
aes(x = target_distance, y = perc_dist, ymin = perc_dist-perc_dist_sem, ymax = perc_dist+perc_dist_sem,
colour = condition, fill = condition, group = condition))+
geom_pointrange(alpha = 0.4,
position = position_jitterdodge(jitter.width = .1,
jitter.height = 0,
dodge.width = .1 ))+
geom_line(data = curve, mapping = aes(x = x2, y = y1, colour = condition))+
scale_colour_manual(values = cbPalette) +
scale_fill_manual(values = cbPalette) +
geom_abline(slope = 1,
intercept = 0,
alpha = 0.5,
linetype = "dashed") +
# # geom_function(fun = earlevel, colour = "#000000")+
# geom_function(fun = bfloorlevel, colour = "#E69F00")+
# stat_function(fun = bearlevel, colour = "#000000")+
geom_text(x = 0.2, y = 7.6, label = sub, hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#999999")+
geom_text(x = 0.2, y = 7.1, label = as.character(as.expression(eq1)), hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#000000")+
geom_text(x = 0.2, y = 6.7, label = as.character(as.expression(eq2)), hjust = 0, nudge_x =  0,parse = TRUE, size = 4, color = "#E69F00")+
geom_text(x = 0.2, y = 6.3, label = as.character(as.expression(eq3)), hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#009E73")+
scale_x_continuous(name="Distance source (m)", limits = c(0,8)) +
scale_y_continuous(name="Perceived distance (m)",   limits = c(0,8)) +
theme_pubr(base_size = 12, margin = TRUE)+
theme(legend.position = "top",
legend.title = element_blank())
fig1
fig1 = ggplot(filter(results_tbl,type == "NORMAL", subject == sub),
aes(x = target_distance, y = perc_dist, colour = condition, fill = condition, group = condition))+
geom_pointrange(alpha = 0.4,
position = position_jitterdodge(jitter.width = .1,
jitter.height = 0,
dodge.width = .1 ))+
geom_line(data = curve, mapping = aes(x = x2, y = y1, colour = condition))+
scale_colour_manual(values = cbPalette) +
scale_fill_manual(values = cbPalette) +
geom_abline(slope = 1,
intercept = 0,
alpha = 0.5,
linetype = "dashed") +
# # geom_function(fun = earlevel, colour = "#000000")+
# geom_function(fun = bfloorlevel, colour = "#E69F00")+
# stat_function(fun = bearlevel, colour = "#000000")+
geom_text(x = 0.2, y = 7.6, label = sub, hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#999999")+
geom_text(x = 0.2, y = 7.1, label = as.character(as.expression(eq1)), hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#000000")+
geom_text(x = 0.2, y = 6.7, label = as.character(as.expression(eq2)), hjust = 0, nudge_x =  0,parse = TRUE, size = 4, color = "#E69F00")+
geom_text(x = 0.2, y = 6.3, label = as.character(as.expression(eq3)), hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#009E73")+
scale_x_continuous(name="Distance source (m)", limits = c(0,8)) +
scale_y_continuous(name="Perceived distance (m)",   limits = c(0,8)) +
theme_pubr(base_size = 12, margin = TRUE)+
theme(legend.position = "top",
legend.title = element_blank())
fig1
fig1 = ggplot(filter(results_tbl,type == "NORMAL", subject == sub),
aes(x = target_distance, y = perc_dist, colour = condition, fill = condition, group = condition))+
geom_poing()+
# geom_pointrange(alpha = 0.4,
#                 position = position_jitterdodge(jitter.width = .1,
#                                                 jitter.height = 0,
#                                                 dodge.width = .1 ))+
geom_line(data = curve, mapping = aes(x = x2, y = y1, colour = condition))+
scale_colour_manual(values = cbPalette) +
scale_fill_manual(values = cbPalette) +
geom_abline(slope = 1,
intercept = 0,
alpha = 0.5,
linetype = "dashed") +
# # geom_function(fun = earlevel, colour = "#000000")+
# geom_function(fun = bfloorlevel, colour = "#E69F00")+
# stat_function(fun = bearlevel, colour = "#000000")+
geom_text(x = 0.2, y = 7.6, label = sub, hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#999999")+
geom_text(x = 0.2, y = 7.1, label = as.character(as.expression(eq1)), hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#000000")+
geom_text(x = 0.2, y = 6.7, label = as.character(as.expression(eq2)), hjust = 0, nudge_x =  0,parse = TRUE, size = 4, color = "#E69F00")+
geom_text(x = 0.2, y = 6.3, label = as.character(as.expression(eq3)), hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#009E73")+
scale_x_continuous(name="Distance source (m)", limits = c(0,8)) +
scale_y_continuous(name="Perceived distance (m)",   limits = c(0,8)) +
theme_pubr(base_size = 12, margin = TRUE)+
theme(legend.position = "top",
legend.title = element_blank())
fig1
fig1 = ggplot(filter(results_tbl,type == "NORMAL", subject == sub),
aes(x = target_distance, y = perc_dist, colour = condition, fill = condition, group = condition))+
geom_point()+
# geom_pointrange(alpha = 0.4,
#                 position = position_jitterdodge(jitter.width = .1,
#                                                 jitter.height = 0,
#                                                 dodge.width = .1 ))+
geom_line(data = curve, mapping = aes(x = x2, y = y1, colour = condition))+
scale_colour_manual(values = cbPalette) +
scale_fill_manual(values = cbPalette) +
geom_abline(slope = 1,
intercept = 0,
alpha = 0.5,
linetype = "dashed") +
# # geom_function(fun = earlevel, colour = "#000000")+
# geom_function(fun = bfloorlevel, colour = "#E69F00")+
# stat_function(fun = bearlevel, colour = "#000000")+
geom_text(x = 0.2, y = 7.6, label = sub, hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#999999")+
geom_text(x = 0.2, y = 7.1, label = as.character(as.expression(eq1)), hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#000000")+
geom_text(x = 0.2, y = 6.7, label = as.character(as.expression(eq2)), hjust = 0, nudge_x =  0,parse = TRUE, size = 4, color = "#E69F00")+
geom_text(x = 0.2, y = 6.3, label = as.character(as.expression(eq3)), hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#009E73")+
scale_x_continuous(name="Distance source (m)", limits = c(0,8)) +
scale_y_continuous(name="Perceived distance (m)",   limits = c(0,8)) +
theme_pubr(base_size = 12, margin = TRUE)+
theme(legend.position = "top",
legend.title = element_blank())
fig1
x1 = c(0:8)
# x1 = seq(1,8,by=.01)
curves1 = data.frame(x2 = x1,
y1 = (10^(m.pend$coefficients[[1]]))*(x1^m.pend$coefficients[[2]]),
condition = "Ear level")
curves2 = data.frame(x2 = x1,
y1 = 10^(m.pend$coefficients[[1]]+m.pend$coefficients[[3]])*(x1^(m.pend$coefficients[[2]]+m.pend$coefficients[[4]])),
condition = "Floor level")
curve = merge(x = curves1, y = curves2, all = TRUE)
# bearlevel = function(x) (10^(m.pend$coefficients[[1]]))*(x^m.pend$coefficients[[2]])
# bfloorlevel = function(x) (10^(m.pend$coefficients[[1]]+m.pend$coefficients[[3]]))*(x^(m.pend$coefficients[[2]]+m.pend$coefficients[[4]]))
#
eq1 <- substitute("Ear level:"~~~italic(y) == a %.% italic(X)^italic((b)),
list(a = round(10^(m.pend$coefficients[[1]]),digits = 2),
b = round(m.pend$coefficients[[2]], digits = 2)))
curve = merge(x = curves1, y = curves2, all = TRUE)
curves2 = data.frame(x2 = x1,
y1 = 10^(m.pend$coefficients[[1]]+m.pend$coefficients[[3]])*(x1^(m.pend$coefficients[[2]]+m.pend$coefficients[[4]])),
condition = "Floor level")
# x1 = seq(1,8,by=.01)
curves1 = data.frame(x2 = x1,
y1 = (10^(m.pend$coefficients[[1]]))*(x1^m.pend$coefficients[[2]]),
condition = "Ear level")
curves2 = data.frame(x2 = x1,
y1 = 10^(m.pend$coefficients[[1]]+m.pend$coefficients[[3]])*(x1^(m.pend$coefficients[[2]]+m.pend$coefficients[[4]])),
condition = "Floor level")
curve = merge(x = curves1, y = curves2, all = TRUE)
View(curves1)
View(curves2)
View(curve)
View(curves1)
View(curves2)
# bearlevel = function(x) (10^(m.pend$coefficients[[1]]))*(x^m.pend$coefficients[[2]])
# bfloorlevel = function(x) (10^(m.pend$coefficients[[1]]+m.pend$coefficients[[3]]))*(x^(m.pend$coefficients[[2]]+m.pend$coefficients[[4]]))
#
eq1 <- substitute("Ear level:"~~~italic(y) == a %.% italic(X)^italic((b)),
list(a = round(10^(m.pend$coefficients[[1]]),digits = 2),
b = round(m.pend$coefficients[[2]], digits = 2)))
eq2 <- substitute("Floor level:"~~~italic(y) == a %.% italic(X)^italic((b)),
list(a = round(10^(m.pend$coefficients[[1]]+m.pend$coefficients[[3]]), digits = 2),
b = round(m.pend$coefficients[[2]]+m.pend$coefficients[[4]], digits = 2)))
eq3 <- substitute("r.squared:"~~~italic(R)^italic(2) == italic(b),
list(b = round(summary(m.pend)$r.squared, digits = 2)))
fig1 = ggplot(filter(results_tbl,type == "NORMAL", subject == sub),
aes(x = target_distance, y = perc_dist, colour = condition, fill = condition, group = condition))+
geom_point()+
# geom_pointrange(alpha = 0.4,
#                 position = position_jitterdodge(jitter.width = .1,
#                                                 jitter.height = 0,
#                                                 dodge.width = .1 ))+
geom_line(data = curve, mapping = aes(x = x2, y = y1, colour = condition))+
scale_colour_manual(values = cbPalette) +
scale_fill_manual(values = cbPalette) +
geom_abline(slope = 1,
intercept = 0,
alpha = 0.5,
linetype = "dashed") +
# # geom_function(fun = earlevel, colour = "#000000")+
# geom_function(fun = bfloorlevel, colour = "#E69F00")+
# stat_function(fun = bearlevel, colour = "#000000")+
geom_text(x = 0.2, y = 7.6, label = sub, hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#999999")+
geom_text(x = 0.2, y = 7.1, label = as.character(as.expression(eq1)), hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#000000")+
geom_text(x = 0.2, y = 6.7, label = as.character(as.expression(eq2)), hjust = 0, nudge_x =  0,parse = TRUE, size = 4, color = "#E69F00")+
geom_text(x = 0.2, y = 6.3, label = as.character(as.expression(eq3)), hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#009E73")+
scale_x_continuous(name="Distance source (m)", limits = c(0,8)) +
scale_y_continuous(name="Perceived distance (m)",   limits = c(0,8)) +
theme_pubr(base_size = 12, margin = TRUE)+
theme(legend.position = "top",
legend.title = element_blank())
fig1
fig1 = ggplot(filter(results_tbl,type == "NORMAL", subject == sub),
aes(x = target_distance, y = perc_dist,
colour = condition, fill = condition, group = condition))+
geom_pointrange(aes(x = target_distance, y = perc_dist, ymin = perc_dist-perc_dist_sem, ymax = perc_dist+perc_dist_sem),alpha = 0.4,
position = position_jitterdodge(jitter.width = .1,
jitter.height = 0,
dodge.width = .1 ))+
geom_line(data = curve, mapping = aes(x = x2, y = y1, colour = condition))+
scale_colour_manual(values = cbPalette) +
scale_fill_manual(values = cbPalette) +
geom_abline(slope = 1,
intercept = 0,
alpha = 0.5,
linetype = "dashed") +
# # geom_function(fun = earlevel, colour = "#000000")+
# geom_function(fun = bfloorlevel, colour = "#E69F00")+
# stat_function(fun = bearlevel, colour = "#000000")+
geom_text(x = 0.2, y = 7.6, label = sub, hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#999999")+
geom_text(x = 0.2, y = 7.1, label = as.character(as.expression(eq1)), hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#000000")+
geom_text(x = 0.2, y = 6.7, label = as.character(as.expression(eq2)), hjust = 0, nudge_x =  0,parse = TRUE, size = 4, color = "#E69F00")+
geom_text(x = 0.2, y = 6.3, label = as.character(as.expression(eq3)), hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#009E73")+
scale_x_continuous(name="Distance source (m)", limits = c(0,8)) +
scale_y_continuous(name="Perceived distance (m)",   limits = c(0,8)) +
theme_pubr(base_size = 12, margin = TRUE)+
theme(legend.position = "top",
legend.title = element_blank())
fig1
# x1 = c(0:8)
x1 = seq(1,8,by=.01)
curves1 = data.frame(x2 = x1,
y1 = (10^(m.pend$coefficients[[1]]))*(x1^m.pend$coefficients[[2]]),
condition = "Ear level")
curves2 = data.frame(x2 = x1,
y1 = 10^(m.pend$coefficients[[1]]+m.pend$coefficients[[3]])*(x1^(m.pend$coefficients[[2]]+m.pend$coefficients[[4]])),
condition = "Floor level")
curve = merge(x = curves1, y = curves2, all = TRUE)
# bearlevel = function(x) (10^(m.pend$coefficients[[1]]))*(x^m.pend$coefficients[[2]])
# bfloorlevel = function(x) (10^(m.pend$coefficients[[1]]+m.pend$coefficients[[3]]))*(x^(m.pend$coefficients[[2]]+m.pend$coefficients[[4]]))
#
eq1 <- substitute("Ear level:"~~~italic(y) == a %.% italic(X)^italic((b)),
list(a = round(10^(m.pend$coefficients[[1]]),digits = 2),
b = round(m.pend$coefficients[[2]], digits = 2)))
eq2 <- substitute("Floor level:"~~~italic(y) == a %.% italic(X)^italic((b)),
list(a = round(10^(m.pend$coefficients[[1]]+m.pend$coefficients[[3]]), digits = 2),
b = round(m.pend$coefficients[[2]]+m.pend$coefficients[[4]], digits = 2)))
eq3 <- substitute("r.squared:"~~~italic(R)^italic(2) == italic(b),
list(b = round(summary(m.pend)$r.squared, digits = 2)))
fig1 = ggplot(filter(results_tbl,type == "NORMAL", subject == sub),
aes(x = target_distance, y = perc_dist,
colour = condition, fill = condition, group = condition))+
geom_pointrange(aes(x = target_distance, y = perc_dist, ymin = perc_dist-perc_dist_sem, ymax = perc_dist+perc_dist_sem),alpha = 0.4,
position = position_jitterdodge(jitter.width = .1,
jitter.height = 0,
dodge.width = .1 ))+
geom_line(data = curve, mapping = aes(x = x2, y = y1, colour = condition))+
scale_colour_manual(values = cbPalette) +
scale_fill_manual(values = cbPalette) +
geom_abline(slope = 1,
intercept = 0,
alpha = 0.5,
linetype = "dashed") +
# # geom_function(fun = earlevel, colour = "#000000")+
# geom_function(fun = bfloorlevel, colour = "#E69F00")+
# stat_function(fun = bearlevel, colour = "#000000")+
geom_text(x = 0.2, y = 7.6, label = sub, hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#999999")+
geom_text(x = 0.2, y = 7.1, label = as.character(as.expression(eq1)), hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#000000")+
geom_text(x = 0.2, y = 6.7, label = as.character(as.expression(eq2)), hjust = 0, nudge_x =  0,parse = TRUE, size = 4, color = "#E69F00")+
geom_text(x = 0.2, y = 6.3, label = as.character(as.expression(eq3)), hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#009E73")+
scale_x_continuous(name="Distance source (m)", limits = c(0,8)) +
scale_y_continuous(name="Perceived distance (m)",   limits = c(0,8)) +
theme_pubr(base_size = 12, margin = TRUE)+
theme(legend.position = "top",
legend.title = element_blank())
fig1
# x1 = c(0:8)
x1 = seq(0,8,by=.01)
curves1 = data.frame(x2 = x1,
y1 = (10^(m.pend$coefficients[[1]]))*(x1^m.pend$coefficients[[2]]),
condition = "Ear level")
curves2 = data.frame(x2 = x1,
y1 = 10^(m.pend$coefficients[[1]]+m.pend$coefficients[[3]])*(x1^(m.pend$coefficients[[2]]+m.pend$coefficients[[4]])),
condition = "Floor level")
curve = merge(x = curves1, y = curves2, all = TRUE)
# bearlevel = function(x) (10^(m.pend$coefficients[[1]]))*(x^m.pend$coefficients[[2]])
# bfloorlevel = function(x) (10^(m.pend$coefficients[[1]]+m.pend$coefficients[[3]]))*(x^(m.pend$coefficients[[2]]+m.pend$coefficients[[4]]))
#
eq1 <- substitute("Ear level:"~~~italic(y) == a %.% italic(X)^italic((b)),
list(a = round(10^(m.pend$coefficients[[1]]),digits = 2),
b = round(m.pend$coefficients[[2]], digits = 2)))
eq2 <- substitute("Floor level:"~~~italic(y) == a %.% italic(X)^italic((b)),
list(a = round(10^(m.pend$coefficients[[1]]+m.pend$coefficients[[3]]), digits = 2),
b = round(m.pend$coefficients[[2]]+m.pend$coefficients[[4]], digits = 2)))
eq3 <- substitute("r.squared:"~~~italic(R)^italic(2) == italic(b),
list(b = round(summary(m.pend)$r.squared, digits = 2)))
fig1 = ggplot(filter(results_tbl,type == "NORMAL", subject == sub),
aes(x = target_distance, y = perc_dist,
colour = condition, fill = condition, group = condition))+
geom_pointrange(aes(x = target_distance, y = perc_dist, ymin = perc_dist-perc_dist_sem, ymax = perc_dist+perc_dist_sem),alpha = 0.4,
position = position_jitterdodge(jitter.width = .1,
jitter.height = 0,
dodge.width = .1 ))+
geom_line(data = curve, mapping = aes(x = x2, y = y1, colour = condition))+
scale_colour_manual(values = cbPalette) +
scale_fill_manual(values = cbPalette) +
geom_abline(slope = 1,
intercept = 0,
alpha = 0.5,
linetype = "dashed") +
# # geom_function(fun = earlevel, colour = "#000000")+
# geom_function(fun = bfloorlevel, colour = "#E69F00")+
# stat_function(fun = bearlevel, colour = "#000000")+
geom_text(x = 0.2, y = 7.6, label = sub, hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#999999")+
geom_text(x = 0.2, y = 7.1, label = as.character(as.expression(eq1)), hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#000000")+
geom_text(x = 0.2, y = 6.7, label = as.character(as.expression(eq2)), hjust = 0, nudge_x =  0,parse = TRUE, size = 4, color = "#E69F00")+
geom_text(x = 0.2, y = 6.3, label = as.character(as.expression(eq3)), hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#009E73")+
scale_x_continuous(name="Distance source (m)", limits = c(0,8)) +
scale_y_continuous(name="Perceived distance (m)",   limits = c(0,8)) +
theme_pubr(base_size = 12, margin = TRUE)+
theme(legend.position = "top",
legend.title = element_blank())
fig1
library(tidyverse)
library(ggpubr)
rm(list=ls())
function (expr, from = NULL, to = NULL, n = 101, add = FALSE,
type = "l", xname = "x", xlab = xname, ylab = NULL, log = NULL,
xlim = NULL, ...)
library(tidyverse)
function (expr, from = NULL, to = NULL, n = 101, add = FALSE,
type = "l", xname = "x", xlab = xname, ylab = NULL, log = NULL,
xlim = NULL, ...)
asd
library(tidyverse)
# i = 2
sub = levels(results_tbl$subject)[i]
