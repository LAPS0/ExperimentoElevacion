print(i)
sub = levels(results_tbl$subject)[i]
print(sub)
m.pend = lm(log10(perc_dist) ~ log10(target_distance)*condition,
data = filter(results_tbl,type == "ROVED", subject == sub))
results_tbl[(results_tbl$type == "ROVED" & results_tbl$subject == sub &results_tbl$condition == "Ear level"),]$slopeLog = m.pend$coefficients[[2]]
results_tbl[(results_tbl$type == "ROVED" & results_tbl$subject == sub &results_tbl$condition == "Floor level"),]$slopeLog = m.pend$coefficients[[2]]+m.pend$coefficients[[4]]
results_tbl[(results_tbl$type == "ROVED" & results_tbl$subject == sub &results_tbl$condition == "Ear level"),]$interceptoLog = m.pend$coefficients[[1]]
results_tbl[(results_tbl$type == "ROVED" & results_tbl$subject == sub &results_tbl$condition == "Floor level"),]$interceptoLog = m.pend$coefficients[[1]]+m.pend$coefficients[[3]]
cbPalette <- c("#000000","#E69F00","#009E73", "#999999", "#D55E00", "#0072B2", "#CC79A7", "#F0E442")
x1 = seq(0,8,by=.01)
curves1 = data.frame(x2 = x1,
y1 = (10^(m.pend$coefficients[[1]]))*(x1^m.pend$coefficients[[2]]),
condition = "Ear level")
curves2 = data.frame(x2 = x1,
y1 = 10^(m.pend$coefficients[[1]]+m.pend$coefficients[[3]])*(x1^(m.pend$coefficients[[2]]+m.pend$coefficients[[4]])),
condition = "Floor level")
curve = merge(x = curves1, y = curves2, all = TRUE)
eq1 <- substitute("Ear level:"~~~italic(y) == a %.% italic(X)^italic((b)),
list(a = round(10^(m.pend$coefficients[[1]]),digits = 2),
b = round(m.pend$coefficients[[2]], digits = 2)))
eq2 <- substitute("Floor level:"~~~italic(y) == a %.% italic(X)^italic((b)),
list(a = round(10^(m.pend$coefficients[[1]]+m.pend$coefficients[[3]]), digits = 2),
b = round(m.pend$coefficients[[2]]+m.pend$coefficients[[4]], digits = 2)))
eq3 <- substitute("r.squared:"~~~italic(R)^italic(2) == italic(b),
list(b = round(summary(m.pend)$r.squared, digits = 2)))
fig1 = ggplot(filter(results_tbl,type == "ROVED", subject == sub),
aes(x = target_distance, y = perc_dist,
colour = condition, fill = condition, group = condition))+
geom_pointrange(aes(x = target_distance, y = perc_dist, ymin = perc_dist-perc_dist_sem, ymax = perc_dist+perc_dist_sem),alpha = 0.4,
position = position_jitterdodge(jitter.width = .1,
jitter.height = 0,
dodge.width = .1 ))+
geom_line(data = curve, mapping = aes(x = x2, y = y1, colour = condition))+
scale_colour_manual(values = cbPalette) +
scale_fill_manual(values = cbPalette) +
geom_abline(slope = 1,
intercept = 0,
alpha = 0.5,
linetype = "dashed") +
geom_text(x = 0.2, y = 7.6, label = sub, hjust = 0, nudge_x =  0, parse = TRUE, size = 2.6, color = "#999999")+
geom_text(x = 0.2, y = 6.6, label = as.character(as.expression(eq1)), hjust = 0, nudge_x =  0, parse = TRUE, size = 2.6, color = "#000000")+
geom_text(x = 0.2, y = 5.6, label = as.character(as.expression(eq2)), hjust = 0, nudge_x =  0,parse = TRUE, size = 2.6, color = "#E69F00")+
geom_text(x = 0.2, y = 4.6, label = as.character(as.expression(eq3)), hjust = 0, nudge_x =  0, parse = TRUE, size = 2.6, color = "#009E73")+
scale_x_continuous(name="Distance source (m)", limits = c(0,8)) +
scale_y_continuous(name="Perceived distance (m)",   limits = c(0,8)) +
theme_pubr(base_size = 10, margin = TRUE)+
theme(legend.position = "top",
legend.title = element_blank())
fig1
fig_ROVED[[i]] = fig1
graphics.off()
earlevel = 0
rm("earlevel", "floorlevel")
}
Figure2 = ggarrange(fig_ROVED[[1]],fig_ROVED[[2]],fig_ROVED[[3]],fig_ROVED[[4]],fig_ROVED[[5]],fig_ROVED[[6]],fig_ROVED[[7]],fig_ROVED[[8]],fig_ROVED[[9]],
fig_ROVED[[10]],fig_ROVED[[11]],fig_ROVED[[12]],fig_ROVED[[13]],fig_ROVED[[14]],fig_ROVED[[15]],fig_ROVED[[16]],fig_ROVED[[17]],fig_ROVED[[18]],
fig_ROVED[[19]],fig_ROVED[[20]],
ncol = 4, nrow = 6,
common.legend = TRUE, legend="top", align = "hv")
Figure2
tinytex::install_tinytex()
library(tidyverse)
library(lme4)
# library(nlme)
library(sjPlot)
library(MuMIn)
library(lmerTest)
library(jtools)
library(gdtools)
library(broom)
library(ggstatsplot)
library(modelsummary)
# library(gmodels)
library(ggpubr)
# install.packages("stargazer")
# library(stargazer)
# install.packages("sjPlot")
library(flextable)
library(sjPlot)
# install.packages("webshot")
library(webshot)
library(officer)
rm(list=ls())
figures_folder = "figuras"
results_tbl <- read.csv("./DatosUnificados/Dresults_without_outliers_slope_and_intercepto_lin_log.csv", header = TRUE, sep = ',', stringsAsFactors = TRUE)
cbPalette <- c("#000000","#E69F00","#009E73", "#999999", "#D55E00", "#0072B2", "#CC79A7", "#F0E442")
# Response variability
## Intra-subject
tabla.ind.var <- filter(results_tbl) %>%
group_by(target_distance,condition,type) %>%
summarise(mSD = mean(perc_dist_sd),
SdSd = sd(perc_dist_sd),
n = n())  %>%
ungroup()
f3 <- ggplot(tabla.ind.var, aes(x=target_distance, y =mSD, group = condition, color = condition)) +
geom_point()+
geom_line(size = 1)+
scale_colour_manual(values = cbPalette) +
scale_fill_manual(values = cbPalette) +
geom_errorbar(data=tabla.ind.var,alpha = 2, width=0, size=1,
mapping=aes(ymin = mSD - (SdSd/sqrt(n)),
ymax = mSD + (SdSd/sqrt(n)),
color=condition))+
geom_abline(intercept = 0, slope = 0, linetype=2) +
facet_grid(.~ condition )+
# scale_y_log10(name="Standard deviation (m)\n +/- SEM Intra-subject") +
# scale_y_log10(name="Standard deviation (m)\n +/- SEM Intra-subject", breaks=c(0,0.5,1,1.5,2),
#               labels=c(0,0.5,1,1.5,2), minor_breaks=NULL, limits = c(-1.1,2)) +
# scale_x_log10(name="Distance source (m)",  breaks=c(2,2.9,4.2,6), labels=c(2,2.9,4.2,6), minor_breaks=NULL, limits = c(1.9,6.1)) +
scale_y_continuous(name="Standard deviation (m)\n +/- SEM Intra-subject", breaks=c(0,0.5,1,1.5,2),
labels=c(0,0.5,1,1.5,2), minor_breaks=NULL, limits = c(-1.1,2)) +
scale_x_continuous(name="Distance source (m)",  breaks=c(2,2.9,4.2,6), labels=c(2,2.9,4.2,6), minor_breaks=NULL, limits = c(1.9,6.1)) +
theme_pubr(base_size = 12, margin = TRUE)+
theme(legend.position = "top",
legend.title = element_blank())
f3
f3 <- ggplot(tabla.ind.var, aes(x=target_distance, y =mSD, group = type, color = type)) +
geom_point()+
geom_line(size = 1)+
scale_colour_manual(values = cbPalette) +
scale_fill_manual(values = cbPalette) +
geom_errorbar(data=tabla.ind.var,alpha = 2, width=0, size=1,
mapping=aes(ymin = mSD - (SdSd/sqrt(n)),
ymax = mSD + (SdSd/sqrt(n)),
color=condition))+
geom_abline(intercept = 0, slope = 0, linetype=2) +
facet_grid(.~ condition )+
# scale_y_log10(name="Standard deviation (m)\n +/- SEM Intra-subject") +
# scale_y_log10(name="Standard deviation (m)\n +/- SEM Intra-subject", breaks=c(0,0.5,1,1.5,2),
#               labels=c(0,0.5,1,1.5,2), minor_breaks=NULL, limits = c(-1.1,2)) +
# scale_x_log10(name="Distance source (m)",  breaks=c(2,2.9,4.2,6), labels=c(2,2.9,4.2,6), minor_breaks=NULL, limits = c(1.9,6.1)) +
scale_y_continuous(name="Standard deviation (m)\n +/- SEM Intra-subject", breaks=c(0,0.5,1,1.5,2),
labels=c(0,0.5,1,1.5,2), minor_breaks=NULL, limits = c(-1.1,2)) +
scale_x_continuous(name="Distance source (m)",  breaks=c(2,2.9,4.2,6), labels=c(2,2.9,4.2,6), minor_breaks=NULL, limits = c(1.9,6.1)) +
theme_pubr(base_size = 12, margin = TRUE)+
theme(legend.position = "top",
legend.title = element_blank())
f3
f3 <- ggplot(tabla.ind.var, aes(x=target_distance, y =mSD, group = type, color = type)) +
geom_point()+
geom_line(size = 1)+
scale_colour_manual(values = cbPalette) +
scale_fill_manual(values = cbPalette) +
geom_errorbar(data=tabla.ind.var,alpha = 2, width=0, size=1,
mapping=aes(ymin = mSD - (SdSd/sqrt(n)),
ymax = mSD + (SdSd/sqrt(n)),
color=type))+
geom_abline(intercept = 0, slope = 0, linetype=2) +
facet_grid(.~ condition )+
# scale_y_log10(name="Standard deviation (m)\n +/- SEM Intra-subject") +
# scale_y_log10(name="Standard deviation (m)\n +/- SEM Intra-subject", breaks=c(0,0.5,1,1.5,2),
#               labels=c(0,0.5,1,1.5,2), minor_breaks=NULL, limits = c(-1.1,2)) +
# scale_x_log10(name="Distance source (m)",  breaks=c(2,2.9,4.2,6), labels=c(2,2.9,4.2,6), minor_breaks=NULL, limits = c(1.9,6.1)) +
scale_y_continuous(name="Standard deviation (m)\n +/- SEM Intra-subject", breaks=c(0,0.5,1,1.5,2),
labels=c(0,0.5,1,1.5,2), minor_breaks=NULL, limits = c(-1.1,2)) +
scale_x_continuous(name="Distance source (m)",  breaks=c(2,2.9,4.2,6), labels=c(2,2.9,4.2,6), minor_breaks=NULL, limits = c(1.9,6.1)) +
theme_pubr(base_size = 12, margin = TRUE)+
theme(legend.position = "top",
legend.title = element_blank())
f3
m.Dist1 <-  lme(perc_dist_sd ~ target_distance*condition, random = ~target_distance|subject,
method = "ML", control =list(msMaxIter = 1e8, msMaxEval = 1e8),
data = filter(results_tbl,condition == "Ear level"))
View(results_tbl)
filter(results_tbl,condition == "Ear level"))
#NORMAL
m.Dist1 <-  lmer(perc_dist_sd ~ target_distance*condition + (target_distance|subject),
data = filter(results_tbl,condition == "Ear level"))
extract_stats(ggcoefstats(m.Dist1))
#NORMAL
m.Dist1 <-  lmer(perc_dist_sd ~ target_distance*type + (target_distance|subject),
data = filter(results_tbl,condition == "Ear level"))
extract_stats(ggcoefstats(m.Dist1))
r.squaredGLMM(m.Dist1)
anova(m.Dist1)
#NORMAL
m.Dist1 <-  lmer(perc_dist_sd ~ target_distance*type + (target_distance|subject),
data = filter(results_tbl,condition == "Floor level"))
extract_stats(ggcoefstats(m.Dist1))
anova(m.Dist1)
setwd("~/GitHub/ExperimentoElevacion/Analysis Results")
setwd("~/GitHub/ExperimentoElevacion/Analysis Results")
library(tidyverse)
library(lme4)
# library(nlme)
library(sjPlot)
library(MuMIn)
library(lmerTest)
library(jtools)
library(gdtools)
library(broom)
library(ggstatsplot)
library(modelsummary)
# library(gmodels)
library(ggpubr)
# install.packages("stargazer")
# library(stargazer)
# library(nlme)
# install.packages("sjPlot")
library(flextable)
library(sjPlot)
# install.packages("webshot")
library(webshot)
library(officer)
rm(list=ls())
figures_folder = "figuras"
results_tbl <- read.csv("./DatosUnificados/Dresults_without_outliers_slope_and_intercepto_lin_log.csv", header = TRUE, sep = ',', stringsAsFactors = TRUE)
cbPalette <- c("#000000","#E69F00","#009E73", "#999999", "#D55E00", "#0072B2", "#CC79A7", "#F0E442")
m.Dist1 <-  lmer(perc_dist ~ target_distance*condition++(1+target_distance|subject)+(0+condition|subject),
data = filter(results_tbl,type == "NORMAL"))
extract_stats(ggcoefstats(m.Dist1))
r.squaredGLMM(m.Dist1)
anova(m.Dist1)
anov1 = anova(m.Dist1)
m.Dist1 <-  lmer(perc_dist ~ target_distance*condition+(target_distance|subject),
data = filter(results_tbl,type == "NORMAL"))
extract_stats(ggcoefstats(m.Dist1))
r.squaredGLMM(m.Dist1)
anova(m.Dist1)
anov2 = anova(m.Dist1)
anov1
anov2
m.Dist1 <-  lmer(perc_dist ~ target_distance*condition++(1+target_distance|subject)+(0+condition|subject),
data = filter(results_tbl,type == "NORMAL"))
extract_stats(ggcoefstats(m.Dist1))
r.squaredGLMM(m.Dist1)
anova(m.Dist1)
anov1 = anova(m.Dist1)
Final.Fixed<-effect(c("target_distance*condition"), m.Dist1)
# library(nlme)
library(effects)
Final.Fixed<-effect(c("target_distance*condition"), m.Dist1)
Final.Fixed<-as.data.frame(Final.Fixed)
HappyData = filter(results_tbl,type == "NORMAL")
HappyData$Model.5.fitted<-predict(m.Dist1)
View(HappyData)
HappyData = filter(results_tbl,type == "NORMAL")
HappyData$Model.5.fitted<-predict(m.Dist1)
FittedlmPlot5 <-ggplot()+
facet_grid(Subject ~ Social, labeller=label_both)+
geom_line(data = HappyData, aes(x = target_distance, y =Model.5.fitted))+
geom_point(data = HappyData, aes(x = target_distance, y =perc_dist, group=subject,colour = subject), size=3)+
#  coord_cartesian(ylim = c(.03,.074))+
xlab("Time Step")+ylab("Happiness")
FittedlmPlot5
FittedlmPlot5 <-ggplot()+
facet_grid(subject ~ condition, labeller=label_both)+
geom_line(data = HappyData, aes(x = target_distance, y =Model.5.fitted))+
geom_point(data = HappyData, aes(x = target_distance, y =perc_dist, group=subject,colour = subject), size=3)+
#  coord_cartesian(ylim = c(.03,.074))+
xlab("Time Step")+ylab("Happiness")
FittedlmPlot5
View(Final.Fixed)
predict(m.Dist1)
coef(m.Dist1)
coef(m.Dist1)[1]
coef(m.Dist1)[[1]]
coef(m.Dist1)conditionEar level
coef(m.Dist1)[1]
str(coef(m.Dist1))
coef(m.Dist1)$subject
coef(m.Dist1)$subject[1]
coef(m.Dist1)$subject[2]
coef(m.Dist1)$subject[3]
coef(m.Dist1)$subject[[3]]
coef(m.Dist1)$subject[[2]]
coef(m.Dist1)$subject[[1]]
coef(m.Dist1)$subject[1]
coef(m.Dist1)$subject
m.Dist1 <-  lmer(perc_dist ~ target_distance*condition+(1+target_distance|subject)+(0+condition|subject),
data = filter(results_tbl,subjetc = "S002",type == "NORMAL"))
m.Dist1 <-  lmer(perc_dist ~ target_distance*condition+(1+target_distance|subject)+(0+condition|subject),
data = filter(results_tbl,subjetc = "S002",type == "NORMAL"))
m.Dist1 <-  lmer(perc_dist ~ target_distance*condition+(1+target_distance|subject)+(0+condition|subject),
data = filter(results_tbl,subject = "S002",type == "NORMAL"))
rm(list=ls())
figures_folder = "figuras"
results_tbl <- read.csv("./DatosUnificados/Dresults_without_outliers_slope_and_intercepto_lin_log.csv", header = TRUE, sep = ',', stringsAsFactors = TRUE)
cbPalette <- c("#000000","#E69F00","#009E73", "#999999", "#D55E00", "#0072B2", "#CC79A7", "#F0E442")
m.Dist1 <-  lmer(perc_dist ~ target_distance*condition+(1+target_distance|subject)+(0+condition|subject),
data = filter(results_tbl,subject = "S002",type == "NORMAL"))
m.Dist1 <-  lmer(perc_dist ~ target_distance*condition+(1+target_distance|subject)+(0+condition|subject),
data = filter(results_tbl,subject = "S002",type == "NORMAL"))
filter(results_tbl,subject = "S002",type == "NORMAL")
filter(results_tbl,subject == "S002",type == "NORMAL")
m.Dist1 <-  lmer(perc_dist ~ target_distance*condition+(1+target_distance|subject)+(0+condition|subject),
data = filter(results_tbl,subject == "S002",type == "NORMAL"))
library(tidyverse)
library(lme4)
library(nlme)
library(sjPlot)
library(MuMIn)
library(ggstatsplot)
library(ggpubr)
library(ggpp)
library(PupillometryR)
rm(list=ls())
figures_folder = "figuras"
results_tbl <- read.csv("./DatosUnificados/Dresults_without_outliers_slope_and_intercepto_lin_log.csv", header = TRUE, sep = ',', stringsAsFactors = TRUE)
cbPalette <- c("#000000","#E69F00","#009E73", "#999999", "#D55E00", "#0072B2", "#CC79A7", "#F0E442")
#LINEAL ----
# PAD NORMAL
m.Dist1 <-  lme(perc_dist ~ target_distance*condition, random = ~target_distance|subject,
method = "ML", control =list(msMaxIter = 1000, msMaxEval = 1000),
data = filter(results_tbl,type == "NORMAL"))
eq1 <- substitute("Ear level:"~~~italic(y) == a %.% italic(X)+italic((b)),
list(a = round(m.Dist1$coefficients$fixed[[2]],digits = 2),
b = round(m.Dist1$coefficients$fixed[[1]], digits = 2)))
eq2 <- substitute("Floor level:"~~~italic(y) == a %.% italic(X)+italic((b)),
list(a = round(m.Dist1$coefficients$fixed[[2]]+m.Dist1$coefficients$fixed[[4]], digits = 2),
b = round(m.Dist1$coefficients$fixed[[1]]+m.Dist1$coefficients$fixed[[3]], digits = 2)))
eq3 <- substitute("r.squared:"~~~italic(R)^italic(2) == italic(b),
list(b = round(r.squaredGLMM(m.Dist1)[2], digits = 2)))
tabla.pob = filter(results_tbl,type == "NORMAL") %>% group_by(target_distance,condition) %>%
summarise(Mperc_dist  = mean(perc_dist),
SDperc_dist = sd(perc_dist)/sqrt(n()))  %>%
ungroup()
f1 <- ggplot(tabla.pob, aes(x=target_distance, y =Mperc_dist, group = condition, color  = condition)) +
geom_pointrange(aes(x = target_distance, y = Mperc_dist, ymin = Mperc_dist-SDperc_dist, ymax = Mperc_dist+SDperc_dist),size = .9,alpha = 1,
position = position_jitterdodge(jitter.width = 0,
jitter.height = 0,
dodge.width = 0 ))+
geom_abline(intercept = 0, slope = 1, linetype=2) +
scale_colour_manual(values = cbPalette) +
scale_fill_manual(values = cbPalette) +
geom_abline(slope =m.Dist1$coefficients$fixed[[2]],
intercept =m.Dist1$coefficients$fixed[[1]],
alpha = 0.5,
size = 1.2,
color = "#000000") +
geom_abline(slope =m.Dist1$coefficients$fixed[[2]]+m.Dist1$coefficients$fixed[[4]],
intercept =m.Dist1$coefficients$fixed[[1]]+m.Dist1$coefficients$fixed[[3]],
alpha = 0.5,
size = 1.2,
color = "#E69F00") +
geom_text(x = 1.1, y = 6.6, label = as.character(as.expression(eq1)), hjust = 0, nudge_x =  0, parse = TRUE, size = 3.5, color = "#000000")+
geom_text(x = 1.1, y = 6.1, label = as.character(as.expression(eq2)), hjust = 0, nudge_x =  0,parse = TRUE, size = 3.5, color = "#E69F00")+
#geom_text(x = 0.2, y = 6, label = as.character(as.expression(eq3)), hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = "#009E73")+
scale_x_continuous(name="Source distance (m)", limits = c(1,7)) +
scale_y_continuous(name="Perceived distance (m)",   limits = c(1,7)) +
ggtitle("Experiment 1")+
theme_pubr(base_size = 12, margin = TRUE)+
theme(legend.position = "top",
legend.title = element_blank())
f1
m.Dist1$coefficients$fixed
m.Dist1$coefficients
#Slope normal
m.Dist1 <-  lmer(perc_dist ~ target_distance*condition++(1+target_distance|subject)+(0+condition|subject),
data = filter(results_tbl,type == "NORMAL"))
extract_stats(ggcoefstats(m.Dist1))
r.squaredGLMM(m.Dist1)
anova(m.Dist1)
anov1 = anova(m.Dist1)
m.Dist1$coefficients$fixed
m.Dist1$coefficients
m.Dist1$subject
sr(m.Dist1)
srt(m.Dist1)
str(m.Dist1)
m.Dist1@frame
m.Dist1@frame$target_distance
m.Dist1@resp
coef(m.Dist1)
coef(m.Dist1)$subject
coef(m.Dist1)$subject[1]
coefint(m.Dist1)
confint(m.Dist1)
library(broom.mixed)
tidy(m.Dist1,effects="fixed")
tidy(as(m.Dist1,"merModLmerTest"),effects="fixed")
tidy(as(m.Dist1,"lmerModLmerTest"),effects="fixed")
m.Dist1$coefficients
rm(list=ls())
figures_folder = "figuras"
results_tbl <- read.csv("./DatosUnificados/Dresults_without_outliers_slope_and_intercepto_lin_log.csv", header = TRUE, sep = ',', stringsAsFactors = TRUE)
cbPalette <- c("#000000","#E69F00","#009E73", "#999999", "#D55E00", "#0072B2", "#CC79A7", "#F0E442")
asdds
setwd("~/GitHub/ExperimentoElevacion/Analysis Results")
dfg
rm()
Session = Restart R
asa
rm(list=ls())
a
library(tidyverse)
library(lme4)
library(nlme)
library(sjPlot)
library(MuMIn)
library(ggstatsplot)
library(ggpubr)
library(ggpp)
library(PupillometryR)
figures_folder = "figuras"
results_tbl <- read.csv("./DatosUnificados/Dresults_without_outliers_slope_and_intercepto_lin_log.csv", header = TRUE, sep = ',', stringsAsFactors = TRUE)
cbPalette <- c("#000000","#E69F00","#009E73", "#999999", "#D55E00", "#0072B2", "#CC79A7", "#F0E442")
# Slope ----
m.Dist1 <-  lmer(perc_dist ~ target_distance*condition++(1+target_distance|subject)+(0+condition|subject),
data = filter(results_tbl,type == "NORMAL"))
extract_stats(ggcoefstats(m.Dist1))
r.squaredGLMM(m.Dist1)
anova(m.Dist1)
anov1 = anova(m.Dist1)
# Slope ----
m.Dist1 <-  lmer(perc_dist ~ target_distance*condition++(1+target_distance|subject)+(0+condition|subject),
data = filter(results_tbl,type == "NORMAL"))
# Slope ----
m.Dist1 <-  lmer(perc_dist ~ target_distance*condition+(1+target_distance|subject)+(0+condition|subject),
data = filter(results_tbl,type == "NORMAL"))
extract_stats(ggcoefstats(m.Dist1))
r.squaredGLMM(m.Dist1)
anova(m.Dist1)
# Slope ----
m.Dist1 <-  lmer(perc_dist ~ target_distance*condition+(1+target_distance|subject)+(0+condition|subject),
data = filter(results_tbl,type == "NORMAL"))
extract_stats(ggcoefstats(m.Dist1))
r.squaredGLMM(m.Dist1)
anova(m.Dist1)
#LINEAL ----
# PAD NORMAL
m.Dist1 <-  lme(perc_dist ~ target_distance*condition, random = ~target_distance|subject,
method = "ML", control =list(msMaxIter = 1000, msMaxEval = 1000),
data = filter(results_tbl,type == "NORMAL"))
extract_stats(ggcoefstats(m.Dist1))
r.squaredGLMM(m.Dist1)
anova(m.Dist1)
#Slope normal
m.Dist1 <-  lmer(perc_dist ~ target_distance*condition++(1+target_distance|subject)+(0+condition|subject),
data = filter(results_tbl,type == "NORMAL"))
extract_stats(ggcoefstats(m.Dist1))
r.squaredGLMM(m.Dist1)
anova(m.Dist1)
anov1 = anova(m.Dist1)
# Slope ----
m.Dist1 <-  lme(perc_dist ~ target_distance*condition, random = ~target_distance|subject,
method = "ML", control =list(msMaxIter = 1000, msMaxEval = 1000),
data = filter(results_tbl,type == "NORMAL"))
extract_stats(ggcoefstats(m.Dist1))
r.squaredGLMM(m.Dist1)
anova(m.Dist1)
library(tidyverse)
library(lme4)
library(nlme)
library(sjPlot)
library(MuMIn)
library(ggstatsplot)
library(ggpubr)
library(ggpp)
library(PupillometryR)
library(tidyverse)
# library(nlme)
library(effects)
library(lme4)
# library(nlme)
library(sjPlot)
library(MuMIn)
library(lmerTest)
library(jtools)
library(gdtools)
library(broom)
library(ggstatsplot)
library(modelsummary)
# library(gmodels)
library(ggpubr)
# install.packages("stargazer")
# library(stargazer)
# library(nlme)
# install.packages("sjPlot")
library(flextable)
library(sjPlot)
# install.packages("webshot")
library(webshot)
library(officer)
rm(list=ls())
figures_folder = "figuras"
results_tbl <- read.csv("./DatosUnificados/Dresults_without_outliers_slope_and_intercepto_lin_log.csv", header = TRUE, sep = ',', stringsAsFactors = TRUE)
cbPalette <- c("#000000","#E69F00","#009E73", "#999999", "#D55E00", "#0072B2", "#CC79A7", "#F0E442")
rm(list=ls())
figures_folder = "figuras"
results_tbl <- read.csv("./DatosUnificados/Dresults_without_outliers_slope_and_intercepto_lin_log.csv", header = TRUE, sep = ',', stringsAsFactors = TRUE)
cbPalette <- c("#000000","#E69F00","#009E73", "#999999", "#D55E00", "#0072B2", "#CC79A7", "#F0E442")
#LINEAL ----
# PAD NORMAL
m.Dist1 <-  lme(perc_dist ~ target_distance*condition, random = ~target_distance|subject,
method = "ML", control =list(msMaxIter = 1000, msMaxEval = 1000),
data = filter(results_tbl,type == "NORMAL"))
extract_stats(ggcoefstats(m.Dist1))
r.squaredGLMM(m.Dist1)
anova(m.Dist1)
# Slope ----
m.Dist1 <-  lme(perc_dist ~ target_distance*condition, random = ~target_distance|subject,
method = "ML", control =list(msMaxIter = 1000, msMaxEval = 1000),
data = filter(results_tbl,type == "NORMAL"))
m.Dist1 <-  lmer(perc_dist ~ target_distance*condition+(1+target_distance|subject)+(0+condition|subject),
data = filter(results_tbl,type == "NORMAL"))
extract_stats(ggcoefstats(m.Dist1))
r.squaredGLMM(m.Dist1)
anova(m.Dist1)
m.Dist1 <-  lmer(perc_dist ~ target_distance*condition+(1+target_distance|subject)+(0+condition|subject),
data = filter(results_tbl,type == "NORMAL"))
extract_stats(ggcoefstats(m.Dist1))
r.squaredGLMM(m.Dist1)
anova(m.Dist1)
fixef(m.Dist1)
ranef(m.Dist1)
ranef(m.Dist1)$subject
fixef(m.Dist1)
fixef(m.Dist1)[2]
ranef(m.Dist1)$subject[2]
ranef(m.Dist1)$subject[[2]]
